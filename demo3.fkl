(define p (lambda (n)
 (define w (lambda (a b)
  (cond ((or (eq b 0) (eq b (add a 1))) 0)
        ((eq a 1) 1)
        (else (add (w (sub a 1) (sub b 1))
                   (w (sub a 1) b))))))
 (define x (lambda (n a)
  (write (w n a) 1)
  (write #\\0x20 1)
  (cond ((not (eq n a)) (x n (add a 1))))))
 (define p-iter (lambda (count)
  (x count 1)
  (write #\\n 1)
  (cond ((lt count n) (p-iter (add count 1)))
        (else ()))))
 (p-iter 1)))
(p 9)
