(import (.. lib utils))

(define code nil)

(define (read-code fp)
  (let loop [(s "")
             (c (fgetc fp))]
    (if c
      (loop (append-string s (string c)) (fgetc fp))
      s)))
(if (<= (length (argv)) 1)
  (setq code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")
  (setq code
    (let* ((fp (fopen (nth 1 (argv)) "rb"))
           (code (read-code fp)))
      (fclose fp)
      code)))

(define m "\x0")

(define len (length code))

(let iter ((cp 0)
           (mp 0))
  (when (< cp len)
    (case (sref code cp)
      ((#\>) (begin
               (setq mp (1+ mp))
               (if (>= mp (length m))
                 (setq m (append-string m "\x0")))))
      ((#\<) (begin
               (if (<= mp 0)
                 (setq m (append-string "\x0" mp))
                 (setq mp (-1+ mp)))))
      ((#\+) (let [(c (sref m mp))]
               (set-sref! m mp (char (1+ (integer c))))))
      ((#\-) (let [(c (sref m mp))]
               (set-sref! m mp (char (-1+ (integer c))))))
      ((#\.) (princ (sref m mp)))
      ((#\,) (set-sref! m mp (fgetc stdin)))
      ((#\[) (let ((c (integer (sref m mp))))
               (if (eq c 0)
                 (let loop ((ch (sref code cp)))
                   (if (not (eq ch #\]))
                     (loop (sref code (setq cp (1+ cp)))))))))
      ((#\]) (let loop ((ch (sref code cp)))
               (if (not (eq ch #\[))
                 (loop (sref code (setq cp (-1+ cp))))
                 (setq cp (-1+ cp)))))
      (1 (setq cp (1+ cp))))
    (iter (1+ cp) mp)))
