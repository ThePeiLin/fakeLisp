(import ../btk)
(load macro.fkl)

(define code nil)

(define (readCode fp)
  (str (appd (let loop ((s nil)
                        (c (getb 1 fp)))
               (if c
                 (loop (appd s c) (getb 1 fp))
                 s))
             #b00)))

(if (le (length (argv)) 1)
  (setq code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")
  (setq code
        (let ((fp (file (nth 1 (argv)) "rb")))
          (if (eq fp nil)
            (begin
              (princ "Faild to open file.\n" stderr)
              (exit 1)))
          (readCode fp)
          )))

(define m #b00)

(let iter ((cp 0)
           (mp 0))
  (case (nth cp code)
    ((#\>) (begin
             (setq mp (add mp 1))
             (if (ge mp (length m))
               (setq m (appd m #b00)))))
    ((#\<) (begin
             (if (le mp 0)
               (setq m (appd #b00 mp))
               (setq mp (sub mp 1)))))
    ((#\+) (let ((c (chr (nth mp m))))
             (setf (nth mp m) (byt (chr (add 1 (int c)))))))
    ((#\-) (let ((c (chr (nth mp m))))
             (setf (nth mp m) (byt (chr (sub (int c) 1))))))
    ((#\.) (princ (chr (nth mp m)) stdout))
    ((#\,) (setf (nth mp m) (getb 1 stdin)))
    ((#\[) (let ((c (int (nth mp m))))
             (if (eq c 0)
               (let loop ((ch (nth cp code)))
                 (if (not (eq ch #\]))
                   (loop (nth (setq cp (add cp 1)) code)))))))
    ((#\]) (let loop ((ch (nth cp code)))
             (if (not (eq ch #\[))
               (loop (nth (setq cp (sub cp 1)) code))
               (setq cp (sub cp 1))))))
  (if (lt cp (length code))
    (iter (add cp 1) mp)))
