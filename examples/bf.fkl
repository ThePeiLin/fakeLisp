(import (.. lib utils m))

(define code nil)

(define (read-code fp)
  (let loop [(s "")
             (c (fgetc fp))]
    (if c
      (loop (append s (string c)) (fgetc fp))
      s)))
(if (<= (length (argv)) 1)
  (setq code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")
  (setq code
    (let* ((fp (fopen (nth 1 (argv)) "rb"))
           (code (read-code fp)))
      (fclose fp)
      code)))

(define m #vu8(0))

(define len (length code))

(define stack nil)
(let iter ((cp 0)
           (mp 0))
  (when (< cp len)
    (case (_ (sref code cp))
      [(#\>) (begin
               (setq mp (1+ mp))
               (if (>= mp (length m))
                 (setq m (append m #vu8(0)))))]
      [(#\<) (begin
               (if (<= mp 0)
                 (setq m (append #vu8(0) mp))
                 (setq mp (-1+ mp))))]
      [(#\+) (let [(c (bvu8ref m mp))]
               (set-bvu8ref! m mp (1+ c)))]
      [(#\-) (let [(c (bvu8ref m mp))]
               (set-bvu8ref! m mp (-1+ c)))]
      [(#\.) (princ (integer->char (bvu8ref m mp)))]
      [(#\,) (set-bvu8ref! m mp (fgetc stdin))]
      [(#\[) (setq stack (cons cp stack))]
      [(#\])
       (if (> (bvu8ref m mp) 0)
         (setq cp (car stack))
         (setq stack (cdr stack)))]
      (1 (setq cp (1+ cp))))
    (iter (1+ cp) mp)))
