(import (.. lib utils))

(define code nil)

(define (read-code fp)
  (str (append (let loop ((s nil)
                        (c (fgetb 1 fp)))
               (if c
                 (loop (append s c) (fgetb 1 fp))
                 s))
             #b00)))
(if (<= (length (argv)) 1)
  (setq code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")
  (setq code
        (let* ((fp (fopen (str (nth 1 (argv))) "rb"))
               (code (read-code fp)))
          (fclose fp)
          code)))

(define m #b00)

(let iter ((cp 0)
           (mp 0))
  (case (aref code cp)
    ((#\>) (begin
             (setq mp (1+ mp))
             (if (>= mp (length m))
               (setq m (append m #b00)))))
    ((#\<) (begin
             (if (<= mp 0)
               (setq m (append #b00 mp))
               (setq mp (-1+ mp)))))
    ((#\+) (let ((c (i8 (aref m mp))))
             (setf (aref m mp) (i8 (1+ (int c))))))
    ((#\-) (let ((c (i8 (aref m mp))))
             (setf (aref m mp) (i8 (-1+ (int c))))))
    ((#\.) (princ (i8 (aref m mp))))
    ((#\,) (setf (aref m mp) (i8 (fgetb 1 stdin))))
    ((#\[) (let ((c (int (aref m mp))))
             (if (eq c 0)
               (let loop ((ch (aref code cp)))
                 (if (not (eq ch #\]))
                   (loop (aref code (setq cp (1+ cp)))))))))
    ((#\]) (let loop ((ch (aref code cp)))
             (if (not (eq ch #\[))
               (loop (aref code (setq cp (-1+ cp))))
               (setq cp (-1+ cp)))))
    (1 (setq cp (1+ cp))))
  (if (< cp (length code))
    (iter (1+ cp) mp)))
