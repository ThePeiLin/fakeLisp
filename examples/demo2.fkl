(load macro.fkl)

(let ((a 8)
      (b 9)
      (c 10)
      (d 11))
 (princ a 1)
 (princ b 1)
 (princ c 1)
 (princ d 1))
(princ #\\n stdout)
(let iter ((a 2))
  (princ a stdout)
  (cond ((eq a 0) 0)
        (1 (iter (sub a 1)))))
(let () (princ "end" stdout))
(princ #\\n stdout)
(define i (let ((a 1)) (lambda (x) (add x a))))
(princ (i 2) stdout)
