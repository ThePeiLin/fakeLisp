(import (std))

(define p (lambda (n)
 (define w (lambda (a b)
  (cond ((or (eq b 0) (eq b (+ a 1))) 0)
        ((eq a 1) 1)
        (1 (+ (w (- a 1) (- b 1))
                   (w (- a 1) b))))))
 (define x (lambda (n a)
  (princ (w n a) stdout)
  (princ #\\x20 stdout)
  (cond ((not (eq n a)) (x n (+ a 1))))))
 (define p-iter (lambda (count)
  (x count 1)
  (princ #\\n stdout)
  (cond ((< count n) (p-iter (+ count 1)))
        (1 ()))))
 (p-iter 1)))
(p 9)
