(import ../btk)

(load macro.fkl)

(define (newTerm)
 (princ "\033[?1049h" stdout))
(define (print,ls)
  (let printList ((tls ls))
    (cond ((null (cdr tls)) (princ (car tls) stdout))
          (1 (princ (car tls) stdout) (printList (cdr tls))))))
(define (delTerm)
  (print "\033[?" "1049l"))
(define (moveLeft) (print "\033[1D"))
(define (moveRight) (print "\033[1C"))
(define (moveUp) (print "\033[1A"))
(define (moveDown) (print "\033[1B"))
(define (printFaQ) (princ "FaQ" stdout))

(newTerm)
(let main ((ch (getch)))
 (cond ((eq ch #\h) (moveLeft))
       ((eq ch #\k) (moveUp))
       ((eq ch #\j) (moveDown))
       ((eq ch #\l) (moveRight))
       ((eq ch #\d) (princ #\\x20 stdout))
       ((eq ch #\\x20) (printFaQ)))
 (if (not (eq ch #\\4)) (main (getch))))
(delTerm)
