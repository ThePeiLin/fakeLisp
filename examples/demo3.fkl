(import (.. lib utils))

(define (new-term)
 (princ "\033[?1049h"))
(define (print,ls)
  (let print-list ((tls ls))
    (cond ((null (cdr tls)) (princ (car tls)))
          (1 (princ (car tls)) (print-list (cdr tls))))))
(define (del-term)
  (print "\033[?" "1049l"))
(define (move-left) (print "\033[1D"))
(define (move-right) (print "\033[1C"))
(define (move-up) (print "\033[1A"))
(define (move-down) (print "\033[1B"))
(define (print-FaQ) (princ "FaQ"))

(new-term)
(let main ((ch (getch)))
  (case (ch ch)
    ((#\h) (move-left))
    ((#\k) (move-up))
    ((#\j) (move-down))
    ((#\l) (move-right))
    ((#\d) (princ #\\s))
    ((#\\s) (print-FaQ)))
  (if (not (eq ch #\\4)) (main (getch))))
(del-term)
