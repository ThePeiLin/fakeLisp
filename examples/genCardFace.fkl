(import (std))

(defmacro (SYM_P ?O)
  `(eq (type ~O) 'sym))
(defmacro (STR_P ?O)
  `(eq (type ~O) 'str))
(defmacro (INT_P ?O)
  `(eq (type ~O) 'int))
(defmacro (PAIR_P ?O)
  `(eq (type ~O) 'pair))
(defmacro (CHR_P ?O)
  `(eq (type ~O) 'chr))


(define expression-translated '(begin
                                 hubris
                                 undefeated
                                 undying
                                 (beDestroyed (summon (* "铁心灭绝者" 1) deck))
                                 ))

(define atomTextTable '())
(define textPatterns '())
(define (add-atom-text s t)
  (setq atomTextTable (cons (cons s t) atomTextTable)))

(add-atom-text 'atk "攻击")
(add-atom-text 'def "防御")
(add-atom-text 'this "这张卡")
(add-atom-text 'undefeated "不屈")
(add-atom-text 'undying "不朽")
(add-atom-text 'hubris "傲慢")
(add-atom-text 'deck "卡组")
(add-atom-text 'handCard "手卡")


(define (add-text-pattern i o)
  (setq textPatterns (cons (cons i o) textPatterns)))
(add-text-pattern '(allCards where)
                  '("所有在" where "的卡"))
(add-text-pattern '(destroy obj)
                  '("摧毁" obj))
(add-text-pattern '(* obj num)
                  '(obj #\* num))
(add-text-pattern '(begin arg,rest)
                  '(arg (rest(sep "/"))))
(add-text-pattern '(summon obj from)
                  '("从" from "召唤" #\( obj #\)))
(add-text-pattern '(beDestroyed arg,rest)
                  '("退场[" arg (rest (sep "/")) "]"))
(add-text-pattern '(beSummoned arg,rest)
                  '("入场[" arg (rest (sep "/")) "]"))
(add-text-pattern '(beConsumed arg,rest)
                  '("支出[" arg (rest (sep "/")) "]"))
(add-text-pattern '(tagged arg,rest)
                  '("标记[" arg (rest (sep "/")) "]"))
(add-text-pattern '(draw arg)
                  '("抽" arg "张卡"))
(add-text-pattern '(inc arg1 arg2)
                  '("增加" arg1 arg2))
(add-text-pattern '(dec arg1 arg2)
                  '("减少" arg1 arg2))
(add-text-pattern '(atkIs arg)
                  '("攻击" arg "的"))
(add-text-pattern '(defIs arg)
                  '("防御" arg "的"))
(add-text-pattern '(backTo arg)
                  '("返回" arg))

(define (generic-find-dot-pair-table-proccesser s l)
  (let iter ((c l))
    (cond ((not c) nil)
          ((eq (caar c) s)
           (cdar c))
          (1 (iter (cdr c))))))

(define (look-up-text-pattern expression)
  (define head (car expression))
  (let iter ((c textPatterns))
    (cond ((null c) nil)
          ((eq (caaar c) head)
           (car c))
          (1 (iter (cdr c))))))

(define (look-up-var s env)
  (generic-find-dot-pair-table-proccesser s env))

(define (look-up-atom-text s)
  (generic-find-dot-pair-table-proccesser s atomTextTable))

(define (bind-arguements expression)
  (define head (car expression))
  (define argPat (cdar
                   (look-up-text-pattern expression)))

  (define argExp (cdr expression))
  (let iter ((c1 argPat)
             (c2 argExp)
             (r nil))
    (cond ((not (or (PAIR_P c2)
                    (null c2)))
           (raise (error 'c2 'invaild-syntax (append "invaild syntax of \"" (str head) "\"\n"))))
          ((and (not c2) (PAIR_P c1))
           (raise (error 'c1/c2 'invaild-syntax (append "invaild syntax of \"" (str head) "\"\n"))))
          ((and c1 (not (eq (type c1) 'pair)))
           (reverse (cons (cons c1  c2) r)))
          ((and c2 (eq (type c1) 'pair))
           (iter (cdr c1) (cdr c2) (cons (cons (car c1) (car c2)) r)))
          (1
           (reverse r)))))

(define generte-html-text
  (lambda (obj)
    (define headerOfCreature
      "<head><link rel=\"stylesheet\" href=\"creatureTable.css\" type=\"text/css\"/><link rel=\"stylesheet\" type=\"text/css\" href=\"font.css\"/></head>")

    (define headerOfCurse
      "<head><link rel=\"stylesheet\" href=\"curseTable.css\" type=\"text/css\"/><link rel=\"stylesheet\" type=\"text/css\" href=\"font.css\"/></head>")

    (define script
      "<script src=\"node_modules/html2canvas/dist/html2canvas.js\"></script><script src=\"node_modules/file-saver/src/FileSaver.js\"></script><script src=\"genCardFace.js\"></script>")
    (define nameStyleOfCreature "<td style=\"color:white;background-color:ForestGreen;text-align:center\">")

    (define nameStyleOfCurse "<td style=\"color:white;background-color:DarkViolet;text-align:center\">")

    (define name ())
    (define section ())
    (define consume ())
    (define value ())
    (define effect ())
    (define intro ())
    (define img ())
    (define atk-def ())

    (let ((obj obj))
      (if (not (and (PAIR_P obj)
                    (eq (type (car obj)) 'sym)
                    (or (eq (car obj) 'creature)
                        (eq (car obj) 'curse))))
        (raise (error 'valid-card-def? 'invalid-tag-of-type "Wrong tag of type\n")))

      (let iter ((c (cdr obj)))
        (cond ((and c (PAIR_P (car c)) (eq (type (caar c)) 'sym))
               (define element (cdr (car c)))
               (case (caar c)
                 (('name) (setq name element))
                 (('section) (setq section element))
                 (('consume) (setq consume element))
                 (('value) (setq value element))
                 (('effect) (setq effect element))
                 (('intro) (setq intro element))
                 (('img) (setq img element))
                 (('atk-def) (setq atk-def element)))
               (iter (cdr c)))
              (c (raise (error 'valid-card-def? 'invalid-syntax-of-element-tag "invaild syntax of element tag")))))

      (define raiseInvalidError
        (lambda (x)
          (raise (error 'valid-card-elemt 'invalid-syntax-of-element-tag (append "invaild syntax of element:" (str x))))))

      (define (valid-other-elemet?)
        (if (not (STR_P name)) (raiseInvalidError 'name))
        (if (not (or (not section)
                     (and section (andmap (lambda (x) (eq (type x) 'str)) section))))
          (raiseInvalidError 'section))
        (if (not (or (INT_P consume) (eq consume '?)))
          (raiseInvalidError 'consume))
        (if (not (or (INT_P value) (eq value '?)))
          (raiseInvalidError 'value))
        (if (not (PAIR_P effect))
          (raiseInvalidError 'effect))
        (if (not (STR_P intro))
          (raiseInvalidError 'intro))
        (if (not (STR_P img))
          (raiseInvalidError 'img)))

      (define (valid-atk-def?)
        (if (not (and (eq (length atk-def) 2)
                      (or (eq (car atk-def) 'i) (INT_P (car atk-def)))
                      (or (eq (cadr atk-def) 'i) (INT_P (cadr atk-def)))))
          (raiseInvalidError 'atk-def)))

      (or (and (eq (car obj) 'creature)
               (valid-other-elemet?)
               (valid-atk-def?))
          (and (eq (car obj) 'curse)
               (valid-other-elemt?)
               (not atk-def))))

    (define cardType (car obj))

    (define (gen-word-section)
      (define retval "")
      (let iter ((c section))
        (cond ((PAIR_P c)
               (setq retval (append retval (car c) (if (cdr c) "/" "")))
               (iter (cdr c)))))
      retval)

    (define (gen-effect-text)
      (define retval "")
      (let loop ((c effect))
        (letcc
          return
          (if (SYM_P c)
            (return (setq retval (append retval (look-up-atom-text c)))))
          (if (INT_P c)
            (return (setq retval (append retval (str c)))))
          (if (STR_P c)
            (return (setq retval (append retval c))))
          (define out-put-pattern (cdr (look-up-text-pattern c)))
          (define env (bind-arguements c))
          (if (null env)
            (raise (error 'c 'invaild-syntax "cant bind arguements\n")))
          (let iter ((c out-put-pattern))
            (if c (begin
                    (cond ((SYM_P (car c))
                           (loop (look-up-var (car c) env)))
                          ((or (STR_P (car c)) (INT_P (car c)) (CHR_P (car c)))
                           (setq retval (append retval (str (car c)))))
                          ((PAIR_P (car c))
                           (let ((sym (caar c))
                                 (setlist (cdar c))
                                 (sep ()))
                             (if setlist
                               (foreach (lambda (x)
                                          (case (car x)
                                            (('sep) (setq sep (cadr x)))
                                            (1 (raise (error 'setlist 'invaild-syntax (append "invaild of \"" (str (car x)) "\"\n"))))))
                                        setlist))
                             (define value (look-up-var sym env))
                             (if value
                               (foreach (lambda (x)
                                          (if sep (setq retval (append retval (str sep))))
                                          (loop x))
                                        value)))))
                    (iter (cdr c)))))))
      retval)

    (define initString (append "<html>"
                               (if (eq 'creature cardType) headerOfCreature headerOfCurse)
                               "<body><title>" (str cardType) "</title>"
                               "<button onclick=\"genCardFaceImage()\"  type=\"button\">genCardFaceImage</button>"
                               "<table id=\"cardface\">"
                               "<tr height=\"48\">"
                               "<td width=\"64\" style=\"color:white;background-color:DodgerBlue;text-align:left\">-" (str consume) "</td>"
                               (if (eq 'creature cardType) nameStyleOfCreature nameStyleOfCurse) name "</td>"
                               "<td width=\"64\"></td></tr>"
                               "<tr>
                               <td style=\"text-align:center\" colspan=\"3\">
                               <canvas id=\"cardimg\" width=\"480\" height=\"348\"></canvas></td></tr>
                               <tr height=\"64\">
                               <td style=\"font-size:80%;vertical-align:top;background-color:Ivory;word-wrap:break-word;word-break:break-all\" colspan=\"3\">"
                               (gen-word-section)
                               "</td></tr>
                               <tr height=\"160\">
                               <td style=\"font-size:80%;background-color:Azure;vertical-align:top;word-wrap:break-word;word-break:break-all\" colspan=\"3\">"
                               (gen-effect-text)
                               "</td>
                               </tr>
                               <tr height=\"48\">"
                               (if (eq cardType 'creature)
                                 (append "<td style=\"text-align:left\">" (str (car atk-def)) "/" (str (cadr atk-def)) "</td><td></td>")
                                 "<td colspan=\"2\"></td>")
                               "<td width=\"64\" style=\"transform:rotate(180deg);color:white;background-color:DodgerBlue;text-align:left\">+"
                               (str value) "</td></tr></table>"
                               "<blockquote>"
                               intro
                               "</blockquote>"
                               "<h2>原图：</h2>
                               <img id=\"origin\" src=\"" img "\" alt=\"" img "\"/>"
                               script
                               "</body></html>"
                               ))
    ))

(princ (generte-html-text (read stdin)) (file "test.html" "w"))


