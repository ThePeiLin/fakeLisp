(defmacro "'(a)" (cons (quote quote) (cons a nil)))
(defmacro "`(a)" (cons (quote ququote) (cons a nil)))
(defmacro "~(a)" (cons (quote unquote) (cons a nil)))
(defmacro "~@(a)" (cons (quote unqtesp) (cons a nil)))
(defmacro
  (let $d,$b)
  ((lambda ()
     (define map
       (lambda (f l)
         (define map-iter
           (lambda (f c p)
             (cond ((null c) (appd p nil))
                   (1 (map-iter f (cdr c) (appd p (cons (f (car c)) nil)))))))
         (map-iter f l nil)))
     (define list (lambda ls ls))
     (define args nil)
     (define vals nil)
     (cond ((eq (type d) 'sym)
            (setq
              args
              (map (lambda (sd) (nth 0 sd)) (car b)))
            (setq
              vals
              (map (lambda (sd) (nth 1 sd)) (car b)))
            `(let () (define ~d ~@`(lambda ~@`(args,~(cdr b)))) ~(cons d vals))
            (list 'let
                  '()
                  (list 'define d (cons 'lambda (cons args (cdr b))))
                  (cons d vals)))
           (1
            (setq args
                  (map (lambda (sd) (nth 0 sd)) d))
            (setq vals
                  (map (lambda (sd) (nth 1 sd)) d))
            `((lambda ~args ~b) ~vals))))))
;            (cons (cons 'lambda (cons args b)) vals))))))
