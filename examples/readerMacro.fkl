(import (std))
(defmacro "\\(a)->(b)"
  ((lambda ()
     (define list (lambda ls ls))
     (list 'lambda (cons a nil) b))))
(defmacro "call(a)(b)" (cons a b))
(defmacro "var(a)=(b)"
  (cons 'define (cons a (cons b nil))))
(defmacro "function(n)(a){(,b)}"
  ((lambda ()
     (define list (lambda ls ls))
     (list 'define n (cons 'lambda (cons a b))))))

var pop=9
function list ls
{
    ls
}
function square (a)
{
    call * (a a)
}

call princ ((\x->(+ x 9) 9) stdout)
call princ (#\\n stdout)
call princ (call list (1 2 3) stdout)
call princ (#\\n stdout)
call princ (call square (pop) stdout)
call princ (#\\n stdout)
