(import (std))

(defmacro (class ?name,?body)
  (begin
    (define data-list nil)
    (define pre-method-list nil)
    (define method-list nil)
    (define construct-method nil)
    (define case-list nil)

    (let loop ((c body))
      (cond (c
              (letcc break
                     (define segmentId (car (car c)))
                     (define segmentData (cdr (car c)))
                     (if (and (not (eq segmentId 'data))
                              (not (eq segmentId 'method)))
                       (break nil))
                     (case segmentId
                       (('data) (setf data-list (append data-list segmentData)))
                       (('method) (setf pre-method-list (append pre-method-list segmentData)))))
              (loop (cdr c)))))

    (let loop ((c data-list))
      (cond (c (let ((name (car (car c))))
                 (setf case-list (cons `(((quote ~name)) ~name) case-list)))
               (loop (cdr c)))))

    (let loop ((c pre-method-list))
      (cond (c
              (let ((methodName (car (car c))))
                (cond ((not (eq methodName name))
                       (setf method-list (cons `(~methodName (lambda ~@(cdr (car c)))) method-list))
                       (setf case-list (cons `(((quote ~methodName)) ~methodName) case-list)))
                      (1
                       (setf construct-method (cdr (car c))))))
              (loop (cdr c)))))
    (setq case-list
          (append case-list
                `((1
                   (raise (error 'passing-member-symbol 'invalid-selector (append "error:Invalid selector \"" (str selector) "\"\n")))
                   ))))

    (define local-env (append data-list method-list))
    `(define ~name
       (lambda ~(car construct-method)
         (letrec ~local-env
           ~@(cdr construct-method)
           (define this
             (lambda (selector)
               (case selector
                 ~@case-list)))
           (progn
             push_var this
             pop_env 1
             ))))))

(define print
  (lambda l
    (define p-iter
      (lambda (c)
        (cond (c (princ (car c) stdout)
                 (p-iter (cdr c))))))
    (p-iter l)))

(class Vec3
       (data
         (X 0.0)
         (Y 0.0)
         (Z 0.0))

       (method
         (Vec3 (x y z)
               (setq X (dbl x))
               (setq Y (dbl y))
               (setq Z (dbl z)))
         (setX (x)
               (setq X (dbl x)))
         (setY (y)
               (setq Y (dbl y)))
         (setZ (z)
               (setq Z (dbl z)))))


(define i (Vec3 1 2 3))

(print " X:" (i 'X)
       " Y:" (i 'Y)
       " Z:" (i 'Z)
       #\\n)

((i 'setX) 9)
((i 'setY) 8)
((i 'setZ) 7)

(print " X:" (i 'X)
       " Y:" (i 'Y)
       " Z:" (i 'Z)
       #\\n)
