(import (.. bdb))

(define cmd-abbr-map
  #hash((b,break)
        (c,continue)
        (n,next)
        (s,step)
        (r,return)
        (h,help)
        (l,list)
        (li,list-ins)
        (si,step-ins)
        (ni,next-ins)
        (bt,where)))

(define help-doc-hash
  (make-hash
    'exit "exit"
    'list "list source code"
    'list-ins "list instruction"
    'next-ins "run the next instruction, but skip subroutine"
    'step-ins "run the next instruction"
    'continue "continue the program until end or reach break point"
    'restart "restart debug with same arguement"
    'break "set break point"
    'tbreak "set temporary break point"
    'delete "delete break point"
    'enable "enable break point"
    'disable "disable break point"
    'next "run the program until next line, but step in function"
    'step "run the program until next line, but step in function"
    'return "run the program until function return"
    'until "run the program until next line or the specified line"
    'help "print this help doc or print the help of command"
    'where "show frames of the current thread"
    'up "move to the older frame"
    'down "move to the newer frame"
    'thread "list threads or switch to other thread"
    'eval "evaluate an expression in current frame"))

(define general-help-doc
  (append! (hash-keys cmd-abbr-map)
           (hash-keys help-doc-hash)))

(define (print-general-help-doc)
  (print "type: (help <topic>)")
  (define count 0)
  (foreach (lambda (x)
             (when (= (% count 4) 0)
               (newline))
             (setq count (1+ count))
             (printf "%s\t" x))
           general-help-doc)
  (newline))

(define
    (cmd-abbr->cmd abbr)
    (define r (hash-ref cmd-abbr-map abbr '()))
    (if r r abbr))

(define (get-help-msg-with-abbr abbr)
  (define r (hash-ref help-doc-hash abbr '()))
  (unless r
    (setq r (hash-ref help-doc-hash
                      (cmd-abbr->cmd abbr)
                      "do not have such a command")))
  r)

(define (unknown-cmd-func,_)
  (println "*** unknown command ***"))

(define (get-cmd-func ht abbr)
  (define r (hash-ref ht abbr '()))
  (unless r
    (setq r (hash-ref ht
                      (cmd-abbr->cmd abbr)
                      unknown-cmd-func))))

(define (debug-help _,rest)
  (if rest
    (foreach (lambda (c)
               (define help-msg
                 (get-help-msg-with-abbr c))
               (printf "%s: %s\n" c help-msg))
             rest)
    (print-general-help-doc)))

(define file-prefix "> ")
(define line-prefix "-> ")

(define (print-cur-line ctx file-prefix line-prefix,print-ins?)
  (define cur-file-line (debug-ctx-get-curline ctx))
  (cond
    [cur-file-line
      (println file-prefix
               (vector-ref cur-file-line 0)
               ":"
               (vector-ref cur-file-line 1))
      (print line-prefix (vector-ref cur-file-line 2))]
    [(or (not print-ins?) (car print-ins?))
     (if (define cur-ins (debug-ctx-get-cur-ins ctx))
       (print-single-ins cur-ins))]))

(define (print-break-point-brief breakpoint)
  (define temp-dis (vector-ref breakpoint 5))
  (printf "%s%s %d at %s:%d\n"
          (if (car temp-dis) "" "disabled ")
          (if (cdr temp-dis)
            "temp-break"
            "breakpoint")
          (vector-ref breakpoint 0)
          (vector-ref breakpoint 1)
          (vector-ref breakpoint 2)))

(define (print-break-point breakpoint)
  (print-break-point-brief breakpoint)

  (define cond-exp (vector-ref breakpoint 3))
  (if cond-exp
    (printf "\tstop only if %S\n" (unbox cond-exp)))

  (define count (vector-ref breakpoint 4))
  (if (> count 0)
    (printf "\tbreakpoint already hit %d time(s)\n" count)))

(define (debug-restart ctx)
  (when (debug-ctx-restart ctx)
    (print-cur-line ctx file-prefix line-prefix)))

(define (debug-continue ctx print-ins?)
  (cond
    [(debug-ctx-done? ctx)
     (debug-restart ctx)]
    [1
     (define bp (debug-ctx-continue ctx))
     (when bp
       (print "reached ")
       (print-break-point-brief bp))
     (print-cur-line ctx file-prefix line-prefix print-ins?)]))

(define (debug-breakpoint ctx,rest)
  (cond
    [rest
      (define breakpoint (apply debug-ctx-set-break
                                ctx
                                nil
                                rest))
      (if (vector? breakpoint)
        (print-break-point breakpoint)
        (println breakpoint))]
    [1
     (define breakpoints (debug-ctx-list-break ctx))
     (when breakpoints
       (foreach print-break-point breakpoints))]))

(define (debug-temporary-breakpoint ctx,rest)
  (cond
    [rest
      (define breakpoint (apply debug-ctx-set-break
                                ctx
                                'is-temporary
                                rest))
      (if (vector? breakpoint)
        (print-break-point breakpoint)
        (println breakpoint))]
    [1
     (define breakpoints (debug-ctx-list-break ctx))
     (when breakpoints
       (foreach print-break-point breakpoints))]))

(define (debug-delete-breakpoint ctx,rest)
  (foreach
    (lambda (num)
      (define bp (debug-ctx-delete-break ctx num))
      (if (vector? bp)
        (begin
          (print "deleted ")
          (print-break-point-brief bp))
        (begin
          (if (> num bp)
            (println "breakpoint number "
                     num
                     " out of range")
            (println "breakpoint number "
                     num
                     " already be deleted")))))
    rest))

(define (debug-disable-breakpoint ctx,rest)
  (foreach
    (lambda (num)
      (define bp (debug-ctx-disable-break ctx num))
      (if (vector? bp)
        (print-break-point-brief bp)
        (begin
          (if (> num bp)
            (println "breakpoint number "
                     num
                     " out of range")
            (println "breakpoint number "
                     num
                     " already be deleted")))))
    rest))

(define (debug-enable-breakpoint ctx,rest)
  (foreach
    (lambda (num)
      (define bp (debug-ctx-enable-break ctx num))
      (if (vector? bp)
        (begin
          (print "enabled ")
          (print-break-point-brief bp))
        (begin
          (if (> num bp)
            (println "breakpoint number "
                     num
                     " out of range")
            (println "breakpoint number "
                     num
                     " already be deleted")))))
    rest))

(define default-list-line-num 11)

(define (print-ins x number-len line-prefix not-curline-prefix)
  (printf "%*s %s%s"
          number-len
          (vector-ref x 0)
          (if (vector-ref x 1)
            line-prefix
            not-curline-prefix)
          (vector-ref x 2))
  (define len (length x))
  (cond
    [(> len 4)
     (printf " %S, %S" (vector-ref x 3) (vector-ref x 4))]
    [(> len 3)
     (printf " %S" (vector-ref x 3))])
  (newline))

(define (print-single-ins ins)
  (define number-len (length (number->string (vector-ref ins 0))))
  (define not-curline-prefix (make-string (length line-prefix) #\\s))
  (print-ins ins number-len line-prefix not-curline-prefix))

(define (print-ins-from-to ctx cur 1st last)
  (define not-curline-prefix (make-string (length line-prefix) #\\s))
  (define ins-list '())

  (setq ins-list (cons cur ins-list))
  (let loop [(n (1+ 1st))]
    (define cur (debug-ctx-list-ins ctx n))
    (when (and (< n last) cur)
      (setq ins-list (cons cur ins-list))
      (loop (1+ n))))

  (setq ins-list (reverse! ins-list))

  (define number-len (length (number->string (vector-ref (car (tail ins-list)) 0))))

  (foreach
    (lambda (x)
      (print-ins x
                 number-len
                 line-prefix
                 not-curline-prefix))
    ins-list))

(define (debug-list-ins ctx,rest)
  (define 1st-line nil)
  (define cur nil)
  (cond
    [(and rest
       (setq 1st-line (car rest))
       (setq cur (debug-ctx-list-ins ctx 1st-line)))
     (define last-line (and (cdr rest) (car (cdr rest))))
     (if last-line
       (setq last-line (1+ last-line))
       (setq last-line (+ 1st-line default-list-line-num)))
     (print-ins-from-to ctx
                        cur
                        1st-line
                        last-line)]
    [(setq cur (debug-ctx-list-ins ctx))
     (setq 1st-line (vector-ref cur 0))
     (define last-line (+ 1st-line default-list-line-num))
     (print-ins-from-to ctx
                        cur
                        1st-line
                        last-line)
     (debug-ctx-set-list-ins ctx last-line)]
    [1 (println "[END]")]))

(define (print-single-line x number-len line-prefix not-curline-prefix)
  (printf "%*s %s%s"
          number-len
          (vector-ref x 0)
          (if (vector-ref x 1)
            line-prefix
            not-curline-prefix)
          (vector-ref x 2)))

(define (print-src-from-to ctx cur 1st last)
  (define not-curline-prefix (make-string (length line-prefix) #\\s))
  (define line-list '())

  (setq line-list (cons cur line-list))
  (let loop [(n (1+ 1st))]
    (define cur (debug-ctx-list-src ctx n))
    (when (and (< n last) cur)
      (setq line-list (cons cur line-list))
      (loop (1+ n))))

  (define number-len (length (number->string (vector-ref (car line-list) 0))))

  (setq line-list (reverse! line-list))

  (foreach
    (lambda (x)
      (print-single-line x number-len line-prefix not-curline-prefix))
    line-list))

(define (print-file-src-from-to ctx cur filename 1st last)
  (define not-curline-prefix (make-string (length line-prefix) #\\s))
  (define line-list '())

  (setq line-list (cons cur line-list))
  (let loop [(n (1+ 1st))]
    (define cur (debug-ctx-list-file-src ctx filename n))
    (when (and (< n last) cur)
      (setq line-list (cons cur line-list))
      (loop (1+ n))))

  (define number-len (length (number->string (vector-ref (car line-list) 0))))

  (setq line-list (reverse! line-list))

  (foreach
    (lambda (x)
      (print-single-line x number-len line-prefix not-curline-prefix))
    line-list))

(define (debug-list-file-src ctx filename,rest)
  (define 1st (if rest (car rest) 1))
  (define last-line (if (and rest (cdr rest))
                      (1+ (car (cdr rest)))
                      (+ 1st default-list-line-num)))
  (define cur (debug-ctx-list-file-src ctx filename 1st))
  (cond
    [cur
      (print-file-src-from-to ctx
                              cur
                              filename
                              1st
                              last-line)]
    [1 (println "[EOF]")]))

(define (debug-list-src ctx,rest)
  (define 1st-line nil)
  (define cur nil)
  (cond
    [(and rest (string? (car rest)))
     (apply debug-list-file-src ctx rest)]
    [(and rest
       (setq 1st-line (car rest))
       (setq cur (debug-ctx-list-src ctx 1st-line)))
     (define last-line (and (cdr rest) (car (cdr rest))))
     (if last-line
       (setq last-line (1+ last-line))
       (setq last-line (+ 1st-line default-list-line-num)))
     (print-src-from-to ctx
                        cur
                        1st-line
                        last-line)]
    [(setq cur (debug-ctx-list-src ctx))
     (setq 1st-line (vector-ref cur 0))
     (define last-line (+ 1st-line default-list-line-num))
     (print-src-from-to ctx
                        cur
                        1st-line
                        last-line)
     (debug-ctx-set-list-src ctx last-line)]
    [1 (println "[EOF]")]))

(define (debug-return ctx)
  (debug-ctx-set-step-out ctx)
  (debug-continue ctx 1))

(define (debug-step ctx)
  (debug-ctx-set-step-into ctx)
  (debug-continue ctx 1))

(define (debug-step-ins ctx)
  (debug-ctx-set-step-ins ctx)
  (debug-continue ctx nil)
  (define cur-ins (debug-ctx-get-cur-ins ctx))
  (when cur-ins
    (print-single-ins cur-ins)))

(define (debug-next-ins ctx)
  (debug-ctx-set-next-ins ctx)
  (debug-continue ctx nil)
  (define cur-ins (debug-ctx-get-cur-ins ctx))
  (when cur-ins
    (print-single-ins cur-ins)))

(define (debug-next ctx)
  (debug-ctx-set-step-over ctx)
  (debug-continue ctx 1))

(define (debug-until ctx,rest)
  (apply debug-ctx-set-until ctx rest)
  (debug-continue ctx 1))

(define (debug-where ctx)
  (debug-ctx-back-trace ctx line-prefix))

(define (debug-thread ctx,rest)
  (if rest
    (if (debug-ctx-switch-thread ctx (car rest))
      (debug-ctx-print-cur-frame ctx line-prefix))
    (debug-ctx-list-thread ctx line-prefix)))

(define (debug-up ctx,rest)
  (define count (if (and rest (> (car rest) 0)) (car rest) 1))
  (define last-result nil)
  (do [(c 0 (1+ c))]
    [(or (>= c count)
       (not (if (define cur-result (debug-ctx-up ctx))
              (setq last-result cur-result))))])

  (when last-result
    (debug-ctx-print-cur-frame ctx line-prefix)))

(define (debug-down ctx,rest)
  (define count (if (and rest (> (car rest) 0)) (car rest) 1))
  (define last-result nil)
  (do [(c 0 (1+ c))]
    [(or (>= c count)
       (not (if (define cur-result (debug-ctx-down ctx))
              (setq last-result cur-result))))])

  (when last-result
    (debug-ctx-print-cur-frame ctx line-prefix)))

(define debug-cmd-func
  (make-hash
    'exit debug-ctx-exit
    'continue (lambda (ctx) (debug-continue ctx 1))
    'restart debug-restart
    'break debug-breakpoint
    'tbreak debug-temporary-breakpoint
    'delete debug-delete-breakpoint
    'enable debug-enable-breakpoint
    'disable debug-disable-breakpoint
    'list debug-list-src
    'list-ins debug-list-ins
    'next debug-next
    'step-ins debug-step-ins
    'next-ins debug-next-ins
    'step debug-step
    'return debug-return
    'eval debug-ctx-eval
    'until debug-until
    'where debug-where
    'up debug-up
    'down debug-down
    'thread debug-thread
    'help debug-help))

(define (debug-run ctx prompt file-prefix line-prefix)
  (print-cur-line ctx file-prefix line-prefix)
  (do []
    [(debug-ctx-exit? ctx)]
    (define cmd-or-err (pcall debug-ctx-repl ctx prompt))
    (if (box? cmd-or-err)
      (begin
        (define cmd (unbox cmd-or-err))
        (xpcall
          (lambda ()
            (cond
             [(eof? cmd) 
              (debug-ctx-exit ctx)]
             [1
              (define cmd-head (if (symbol? cmd) cmd (car cmd)))
              (define cmd-rest (if (symbol? cmd) nil (cdr cmd)))
              (define cmd-func (get-cmd-func debug-cmd-func cmd-head))
              (apply cmd-func ctx cmd-rest)]))
          nil (lambda (e) (printf "*** %S: %s ***\n" (error-type e) (error-msg e)))))
      (printf "*** %S: %s ***\n" (error-type cmd-or-err) (error-msg cmd-or-err)))))

(define (fdb-main)

  (define arg-list (cdr (argv)))

  (if (null arg-list)
    (exit))

  (define file-name (car arg-list))

  (define dbg-ctx (make-debug-ctx file-name arg-list))

  (when (error? dbg-ctx)
    (raise dbg-ctx))

  (define prompt "(fdb) ")
  
  (debug-run dbg-ctx prompt file-prefix line-prefix))

(if *main?*
  (fdb-main))
