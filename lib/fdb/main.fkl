(import (only (.. utils m) static-strcat))

(import (bin bdb))

(define file-prefix "> ")
(define line-prefix "\n-> ")

(define help-doc
  (static-strcat
    "help: print this help doc or print the help of command\n"
    "exit: exit\n"
    "continue: continue the program until end or reach break point\n"
    "break: set break point\n"
    "delete: delete break point\n"
    "next: run the program until next line\n"
    "step: run the program until next line, but step in function\n"
    "restart: restart the debugger\n"
    "return: run the program until function return\n"))

(define help-doc-hash
  (make-hash
    'exit "exit"
    'continue "continue the program until end or reach break point"
    'break "set break point"
    'delete "delete break point"
    'next "run the program until next line, but step in function"
    'step "run the program until next line, but step in function"
    'return "run the program until function return"
    'restart "restart the debugger"
    'help "print this help doc or print the help of command"))

(define debug-cmd-func
  (make-hash
    'exit debug-ctx-exit
    'continue debug-ctx-continue
    'break debug-ctx-set-break
    'delete debug-ctx-del-break
    'next debug-ctx-next
    'step debug-ctx-step
    'help (lambda (_,rest)
            (if rest
              (if (cdr rest)
                (println "invalid command\n")
                (println (hash-ref help-doc-hash
                                   (car rest)
                                   "do not have such a command")
                         #\\n))
              (println help-doc)))))

(define cmd-abbr-map
  #hash((b,break)
        (c,continue)
        (n,next)
        (s,step)
        (r,return)
        (h,help)))

(define (debug-ctx-run ctx prompt line-prefix)
  (define cur-file-line (debug-ctx-get-curline ctx))
  (print file-prefix (car cur-file-line))
  (print line-prefix (cdr cur-file-line))
  (do []
    [(debug-ctx-end? ctx)]
    (define cmd (debug-ctx-repl ctx prompt))
    (define cmd-func (hash-ref debug-cmd-func (car cmd) '()))
    (when cmd-func
      (apply cmd-func ctx (cdr cmd)))))

(define (fdb-main)

  (define arg-list (cdr (argv)))

  (if (null arg-list)
    (exit))

  (define file-name (car arg-list))

  (define dbg-ctx (make-debug-ctx file-name arg-list))

  (when (error? dbg-ctx)
    (raise dbg-ctx))

  (define prompt "(fdb) ")
  
  (define cmd-func-table
    (make-hash))

  (debug-ctx-run dbg-ctx prompt line-prefix))

(if *main?*
  (fdb-main))
