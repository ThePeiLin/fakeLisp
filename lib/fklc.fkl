(library
  fklc
  (export
    compile-i32
    compile-i64
    compile-char
    compile-symbol
    compile-f64
    compile-string
    compile-bytevector
    compile-big-int
    compile-integer
    compile-number
    make-push-nil
    compile-atom-literal
    compile-obj
    fbc->bytevector
    bytevector->fbc
    pattern-match
    match-and-call
    opcode-list
    opcode-hashtable
    opcode->number
    fbc?)
  (define opcode-list
    '(
      dummy
      push-nil
      push-pair
      push-i32
      push-i64
      push-char
      push-f64
      push-str
      push-sym
      push-var
      push-top
      push-proc
      pop
      pop-var
      pop-arg
      pop-rest-arg
      set-tp
      set-bp
      call
      res-tp
      pop-tp
      jmp-if-true
      jmp-if-false
      jmp
      push-try
      pop-try
      append
      push-vactor
      push-r-env
      pop-r-env
      tail-call
      push-big-int
      push-box
      push-bytevector
      push-hashtable-eq
      push-hashtable-eqv
      push-hashtable-equal
      ))
  (define opcode-hashtable
    (apply hash
           (map ((lambda (n)
                   (lambda (s)
                     (cons s (setq n (1+ n))))) -1)
                opcode-list)))
  (define opcode->number
    (lambda (s)
      (cdr (href opcode-hashtable s))))
  (define fklc (dlopen (append (getdir) "/../fklc")))
  (define fbc? (dlsym fklc "fklc_fbc_p"))
  (define pattern-match (dlsym fklc "fklc_pattern_match"))
  (define compile-i32 (dlsym fklc "fklc_compile_i32"))
  (define compile-i64 (dlsym fklc "fklc_compile_i64"))
  (define compile-char (dlsym fklc "fklc_compile_char"))
  (define compile-symbol (dlsym fklc "fklc_compile_symbol"))
  (define compile-f64 (dlsym fklc "fklc_compile_f64"))
  (define compile-string (dlsym fklc "fklc_compile_string"))
  (define compile-bytevector (dlsym fklc "fklc_compile_bytevector"))
  (define compile-big-int (dlsym fklc "fklc_compile_big_int"))
  (define compile-integer (dlsym fklc "fklc_compile_integer"))
  (define compile-number (dlsym fklc "fklc_compile_number"))
  (define make-push-nil (dlsym fklc "fklc_make_push_nil"))
  (define compile-atom-literal (dlsym fklc "fklc_compile_atom_literal"))
  (define compile-obj (dlsym fklc "fklc_compile_obj"))
  (define fbc->bytevector (dlsym fklc "fklc_fbc_to_bytevector"))
  (define bytevector->fbc (dlsym fklc "fklc_bytevector_to_fbc"))
  (define match-and-call
    (lambda (p e f result-box)
      (define r (pattern-match p e))
      (cond
        [(r (set-box! result-box (f r)))])))
  (define compile-define-expression
    (lambda (ht)
      ()
      ))
  )
