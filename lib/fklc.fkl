(module
  fklc
  (compile-i32
    compile-i64
    compile-char
    compile-symbol
    compile-f64
    compile-string
    compile-bytevector
    compile-big-int
    compile-integer
    compile-number
    make-fbc
    make-push-nil
    compile-atom-literal
    compile-obj
    fbc->bytevector
    bytevector->fbc
    pattern-match
    opcode-list
    opcode-hashtable
    opcode->number
    fbc?
    init-symbol-table!
    init-lst-as-global!
    add-lst-symbol!
    find-lst-symbol
    find-symbol-in-ht
    add-symbol!
    make-lst
    make-global-lst
    lst-symbols-num
    lst-symbols
    lst-prev
    )
  (define opcode-list
    '(
      dummy
      push-nil
      push-pair
      push-i32
      push-i64
      push-char
      push-f64
      push-str
      push-sym
      push-var
      push-top
      push-proc
      pop
      pop-var
      pop-arg
      pop-rest-arg
      set-tp
      set-bp
      call
      res-tp
      pop-tp
      res-bp
      jmp-if-true
      jmp-if-false
      jmp
      push-try
      pop-try
      append
      push-vactor
      push-r-env
      pop-r-env
      tail-call
      push-big-int
      push-box
      push-bytevector
      push-hashtable-eq
      push-hashtable-eqv
      push-hashtable-equal
      ))
  (define opcode-hashtable
    (apply hash
           (map ((lambda (n)
                   (lambda (s)
                     (cons s (setq n (1+ n))))) -1)
                opcode-list)))
  (define opcode->number
    (lambda (s)
      (href opcode-hashtable s ())))
  (define fklc (dlopen (append *file-dir* "/../fklc")))
  (define fbc? (dlsym fklc "fklc_fbc_p"))
  (define pattern-match (dlsym fklc "fklc_pattern_match"))
  (define compile-i32 (dlsym fklc "fklc_compile_i32"))
  (define compile-i64 (dlsym fklc "fklc_compile_i64"))
  (define compile-char (dlsym fklc "fklc_compile_char"))
  (define compile-symbol (dlsym fklc "fklc_compile_symbol"))
  (define compile-f64 (dlsym fklc "fklc_compile_f64"))
  (define compile-string (dlsym fklc "fklc_compile_string"))
  (define compile-bytevector (dlsym fklc "fklc_compile_bytevector"))
  (define compile-big-int (dlsym fklc "fklc_compile_big_int"))
  (define compile-integer (dlsym fklc "fklc_compile_integer"))
  (define compile-number (dlsym fklc "fklc_compile_number"))
  (define make-push-nil (dlsym fklc "fklc_make_push_nil"))
  (define compile-atom-literal (dlsym fklc "fklc_compile_atom_literal"))
  (define compile-obj (dlsym fklc "fklc_compile_obj"))
  (define fbc->bytevector (dlsym fklc "fklc_fbc_to_bytevector"))
  (define bytevector->fbc (dlsym fklc "fklc_bytevector_to_fbc"))
  (define make-fbc (dlsym fklc "fklc_make_fbc"))
  (define add-symbol! (dlsym fklc "fklc_add_symbol"))

  (define raise-wrong-type-error
    (lambda (where)
      (raise (error where 'wrong-types-of-arguements  "Wrong arguement "))))

  (define check-type
    (lambda (v p where)
      (cond
        [(not (p v))
         (raise-wrong-type-error where)])))

  (define make-lst
    (lambda (prev)
      (cons #hash() prev)))

  (define lst-symbols
    (lambda (t)
      (car t)))

  (define lst-symbols-num
    (lambda (t)
      (hash-num (lst-symbols))))

  (define lst-prev
    (lambda (t)
      (cdr t)))

  (define builtin-symbol-list
    '(
      nil
      stdin
      stdout
      stderr
      car
      cdr
      cons
      append
      copy
      atom
      null
      not
      eq
      eqv
      equal
      =
      +
      1+
      -
      -1+
      *
      /
      //
      %
      abs
      >
      >=
      <
      <=
      nth
      length
      apply
      call/cc
      fopen
      read
      prin1
      princ
      dlopen
      dlsym
      argv
      go
      chanl
      chanl-num
      send
      recv
      error
      raise
      reverse
      fclose
      feof
      nthcdr
      char?
      integer?
      i32?
      i64?
      f64?
      pair?
      symbol?
      string->symbol
      string?
      string
      sub-string
      make-string
      symbol->string
      number->string
      vector->string
      bytevector->string
      list->string
      ->string
      sref
      set-sref!
      fill-string!
      error?
      procedure?
      proc?
      dlproc?
      vector?
      vector
      make-vector
      sub-vector
      list->vector
      string->vector
      vref
      set-vref!
      cas-vref!
      fill-vector!
      list?
      list
      make-list
      vector->list
      string->list
      set-nth!
      set-nthcdr!
      bytevector?
      bytevector
      sub-bytevector
      make-bytevector
      bytevector->s8-list
      bytevector->u8-list
      bytevector->s8-vector
      bytevector->u8-vector
      bvs8ref
      bvs16ref
      bvs32ref
      bvs64ref
      bvu8ref
      bvu16ref
      bvu32ref
      bvu64ref
      bvf32ref
      bvf64ref
      set-bvs8ref!
      set-bvs16ref!
      set-bvs32ref!
      set-bvs64ref!
      set-bvu8ref!
      set-bvu16ref!
      set-bvu32ref!
      set-bvu64ref!
      set-bvf32ref!
      set-bvf64ref!
      fill-bytevector!

      chanl?
      dll?
      getdir
      fgetc
      fgeti
      fwrite
      fgets
      fgetb

      big-int?

      set-car!
      set-cdr!
      box
      unbox
      set-box!
      cas-box!
      box?
      fix-int?

      number?
      string->number
      char->integer
      symbol->integer
      integer->char
      number->f64
      number->integer
      number->i32
      number->i64
      number->big-int

      map
      foreach
      andmap
      ormap
      memq
      member
      memp
      filter

      set!

      getch
      sleep
      usleep
      srand
      rand
      get-time
      remove-file
      time
      system
      hash
      hash-num
      make-hash
      hasheqv
      make-hasheqv
      hashequal
      make-hashequal
      hash?
      hasheq?
      hasheqv?
      hashequal?
      href
      href!
      set-href!
      set-href*!
      hash->list
      hash-keys
      hash-values
      ))

  (define init-symbol-table!
    (lambda ()
      (foreach (lambda (sym)
                 (add-symbol! (symbol->string sym)))
               builtin-symbol-list)))


  (define add-lst-symbol!
    (lambda (t s)
      (check-type s symbol? 'add-lst-symbol!)
      (href! (lst-symbols t) s 1)))

  (define find-symbol-in-ht
    (lambda (ht s)
      (check-type s symbol? 'find-symbol-in-ht)
      (href ht s '())))

  (define find-lst-symbol
    (lambda (t s)
      (check-type s symbol? 'find-lst-symbol)
      (href (lst-symbols t) s nil)))

  (define init-lst-as-global!
    (lambda (t)
      (foreach (lambda (s) (add-lst-symbol! t s))
               builtin-symbol-list)))

  (define make-global-lst
    (lambda ()
      (define r (make-lst nil))
      (init-lst-as-global! r)
      r))
  )
