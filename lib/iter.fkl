;export list
;*  mk-integer-iterator
;*  mk-list-iterator
;*  do-iter

(export
  (define (mk-integer-iterator start end step)
    (lambda ()
      (define cur start)
      (cons (lambda () (>= cur end))
            (lambda ()
              (define r cur)
              (setq cur (+ cur step))
              r)))))

(export
  (define (mk-list-iterator l)
    (lambda ()
      (define c l)
      (cons
        (lambda () (not c))
        (lambda ()
          (define r (car c))
          (setq c (cdr c))
          r)))))

(export
  (define (iter-foreach f iterator)
    (define pp (iterator))
    (define end? (car pp))
    (define next (cdr pp))
    (do []
      [(end?)]
      (f (next)))))

(export
  (define (iter-map f iterator)
    (define pp (iterator))
    (define end? (car pp))
    (define next (cdr pp))
    (do [(r nil
            (cons (f (next)) r))]
      [(end?) (reverse! r)])))

