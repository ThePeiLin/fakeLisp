(define (first $$ line)
  (vref $$ 0))
(define (second $$ line)
  (vref $$ 1))

(define (first->number $$ line)
  (string->number (vref $$ 0)))

(define (cons-0-2 $$ line)
  (cons (vref $$ 0) (vref $$ 2)))

(define (return-nil $$ line)
  nil)

(define (cons-0 $$ line)
  (cons (vref $$ 0) nil))

(export
  (define json-parser
    (make-parser
      'json-value
      'json-value #[null] first
      'json-value #[bool] first
      'json-value #[string] first
      'json-value #[integer] first
      'json-value #[float] first
      'json-value #[object] first
      'json-value #[array] first

      'null #[1 "null"] (lambda ($$ line) 'null)
      'bool #[1 "true"] (lambda ($$ line) 'true)
      'bool #[1 "false"] (lambda ($$ line) 'false)
      'string #[#&"^\"(\\\\.|.)*\"$"] (lambda ($$ line) (parse (vref $$ 0)))
      'integer #[?dint] first->number
      'integer #[?xint] first->number
      'integer #[?oint] first->number
      'float #[?dfloat] first->number
      'float #[?xfloat] first->number

      'array #["[" array-items "]"] (lambda ($$ line) (list->vector (vref $$ 1)))
      'array-items #[] return-nil
      'array-items #[json-value] cons-0
      'array-items #[json-value "," array-items] cons-0-2

      'object #["{" object-items "}"] (lambda ($$ line) (apply hashequal (vref $$ 1)))
      'object-item #[string ":" json-value] cons-0-2
      'object-items #[] return-nil
      'object-items #[object-item] cons-0
      'object-items #[object-item "," object-items] cons-0-2
      () #[#&"\\s+"])))
