;export list
;*  enqueue!
;*  queue-push!
;*  queue-pop!
;*  dequeue!
;*  queue-base
;*  queue-front
;*  queue-rear
;*  queue-length
;*  make-queue
;*  queue?
;*  queue-empty?
;*  queue->list

(define (type q)
  (vector-ref q 0))

(define (q-front queue)
  (vector-ref queue 1))

(define (q-rear q)
  (vector-ref q 2))

(define (rear-set! q r)
  (vector-set! q 2 r))

(define (new-tail-set! q n)
  (cdr-set! (q-rear q) n))

(define (front-set! q f)
  (vector-set! q 1 f))

(export
  (define (queue-empty? queue)
    (null (cdr (q-front queue))))

  (define (make-queue,elems)
    (define front (cons nil (copy elems)))
    (define rear (tail front))
    `#(queue ~front
             ~rear))

  (define (queue? queue)
    (and (vector? queue)
      (eqv (length queue) 3)
      (eq (type queue) 'queue)))

  (define (queue-head q)
    (cdr (q-front q)))

  (define (queue->list q)
    (copy (queue-head q)))

  (define (queue-front queue)
    (define base (cdr (q-front queue)))
    (if base
      (box (car base))
      nil))

  (define (queue-rear queue)
    (if (cdr (q-front queue))
      (box (car (q-rear queue)))
      nil))

  (define (queue-length queue)
    (length (cdr (q-front queue))))

  (define (enqueue! q e)
    (define n `(~e))
    (new-tail-set! q n)
    (rear-set! q n)
    e)

  (define (queue-push! q e)
    (define front (q-front q))
    (car-set! front e)
    (front-set! q (cons nil front))
    e)

  (define (queue-pop! q)
    (define r (queue-front q))
    (when r
      (define next (cdr (q-front q)))
      (front-set! q next)
      (car-set! next nil))
    r)

  (define dequeue! queue-pop!))
