;export list
;*  stack-push!
;*  stack-pop!
;*  stack?
;*  stack-top
;*  stack-empty?
;*  make-stack
;*  stack->list
;*  stack-count
;*  stack-base

(export (define (stack-base s) (vec-ref s 1)))

(define (base-set! s b) (vec-set! s 1 b))

(define (type s) (vec-ref s 0))

(export
  (define (make-stack,elems)
    `#(stack ~(reverse elems)))

  (define (stack->list stack)
    (copy (stack-base stack)))

  (define (stack? stack)
    (and (vector? stack)
      (eq (type stack) 'stack)
      (eqv (length stack) 2)))

  (define (stack-push! s e)
    (base-set! s (cons e (stack-base s)))
    e)

  (define (stack-top s)
    (define base (stack-base s))
    (if base
      (box (car base))
      nil))

  (define (stack-pop! s)
    (define r (stack-top s))
    (if r (base-set! s (cdr (stack-base s))))
    r)

  (define (stack-count s)
    (length (stack-base s)))

  (define (stack-empty? s)
    (null (stack-base s))))
