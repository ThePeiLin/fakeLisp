(library (std)
         (export cons
                 car
                 cdr
                 caar
                 cadr
                 cdar
                 cddr
                 caaar
                 caadr
                 cadar
                 caddr
                 cdaar
                 cdadr
                 cddar
                 cdddr
                 caaaar
                 caaadr
                 caadar
                 caaddr
                 cadaar
                 cadadr
                 caddar
                 cadddr
                 cdaaar
                 cdaadr
                 cdadar
                 cdaddr
                 cddaar
                 cddadr
                 cdddar
                 cddddr
                 list
                 atom
                 null
                 type
                 aply
                 eq
                 eqn
                 equal
                 gt
                 ge
                 lt
                 le
                 not
                 dbl
                 str
                 sym
                 chr
                 int
                 byt
                 add
                 sub
                 mul
                 div
                 rem
                 nth
                 length
                 appd
                 append
                 file
                 read
                 getb
                 write
                 putb
                 princ
                 go
                 chanl
                 send
                 recv
                 clcc
                 dll
                 dlsym
                 error
                 raise
                 +
                 -
                 *
                 /
                 map
                 fprint
                 print
                 fwrite
                 square)
         (define cons (lambda (a b)
                        (proc
                          push_pair
                          push_var a
                          pop_car
                          push_var b
                          pop_cdr
                          )))

         (define car (lambda (a)
                       (proc
                         push_var a
                         push_car
                         )))

         (define cdr (lambda (a)
                       (proc
                         push_var a
                         push_cdr
                         )))
         (define caar (lambda (a)
                        (proc
                          push_var a
                          push_car
                          push_car
                          )))

         (define cadr (lambda (a)
                        (proc
                          push_var a
                          push_cdr
                          push_car
                          )))

         (define cdar (lambda (a)
                        (proc
                          push_var a
                          push_car
                          push_cdr
                          )))

         (define cddr (lambda (a)
                        (proc
                          push_var a
                          push_cdr
                          push_cdr
                          )))

         (define caaar (lambda (a)
                         (proc
                           push_var a
                           push_car
                           push_car
                           push_car
                           )))

         (define caadr (lambda (a)
                         (proc
                           push_var a
                           push_cdr
                           push_car
                           push_car
                           )))

         (define cadar (lambda (a)
                         (proc
                           push_var a
                           push_car
                           push_cdr
                           push_car
                           )))

         (define caddr (lambda (a)
                         (proc
                           push_var a
                           push_cdr
                           push_cdr
                           push_car
                           )))

         (define cdaar (lambda (a)
                         (proc
                           push_var a
                           push_car
                           push_car
                           push_cdr
                           )))

         (define cdadr (lambda (a)
                         (proc
                           push_var a
                           push_cdr
                           push_car
                           push_cdr
                           )))

         (define cddar (lambda (a)
                         (proc
                           push_var a
                           push_car
                           push_cdr
                           push_cdr
                           )))

         (define cdddr (lambda (a)
                         (proc
                           push_var a
                           push_cdr
                           push_cdr
                           push_cdr
                           )))

         (define caaaar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_car
                            push_car
                            push_car
                            )))

         (define caaadr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_car
                            push_car
                            push_car
                            )))

         (define caadar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_cdr
                            push_car
                            push_car
                            )))

         (define caaddr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_cdr
                            push_car
                            push_car
                            )))

         (define cadaar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_car
                            push_cdr
                            push_car
                            )))

         (define cadadr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_car
                            push_cdr
                            push_car
                            )))

         (define caddar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_cdr
                            push_cdr
                            push_car
                            )))

         (define cadddr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_cdr
                            push_cdr
                            push_car
                            )))
        
         (define cdaaar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_car
                            push_car
                            push_cdr
                            )))
        
         (define cdaadr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_car
                            push_car
                            push_cdr
                            )))

         (define cdadar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_cdr
                            push_car
                            push_cdr
                            )))

         (define cdaddr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_cdr
                            push_car
                            push_cdr
                            )))
        
         (define cddaar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_car
                            push_cdr
                            push_cdr
                            )))
        
         (define cddadr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_car
                            push_cdr
                            push_cdr
                            )))

         (define cdddar (lambda (a)
                          (proc
                            push_var a
                            push_car
                            push_cdr
                            push_cdr
                            push_cdr
                            )))

         (define cddddr (lambda (a)
                          (proc
                            push_var a
                            push_cdr
                            push_cdr
                            push_cdr
                            push_cdr
                            )))

         (define list (lambda ls ls))

         (define atom (lambda (a)
                        (proc
                          push_var a
                          atom
                          )))

         (define null (lambda (a)
                        (proc
                          push_var a
                          null
                          )))

         (define type (lambda (a)
                        (proc
                          push_var a
                          type
                          )))

         (define aply (lambda (a b)
                        (proc
                          set_bp
                          push_var b
                          push_list_arg
                          push_var a
                          invoke
                          )))

         (define eq (lambda (a b)
                      (proc
                        push_var a
                        push_var b
                        eq
                        )))

         (define eqn (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         eqn
                         )))

         (define equal (lambda (a b)
                         (proc
                           push_var a
                           push_var b
                           equal
                           )))

         (define gt (lambda (a b)
                      (proc
                        push_var a
                        push_var b
                        gt
                        )))

         (define ge (lambda (a b)
                      (proc
                        push_var a
                        push_var b
                        ge
                        )))

         (define lt (lambda (a b)
                      (proc
                        push_var a
                        push_var b
                        lt
                        )))

         (define le (lambda (a b)
                      (proc
                        push_var a
                        push_var b
                        le
                        )))

         (define not (lambda (a)
                       (proc
                         push_var a
                         not
                         )))

         (define dbl (lambda (a)
                       (proc
                         push_var a
                         dbl
                         )))

         (define str (lambda (a)
                       (proc
                         push_var a
                         str
                         )))

         (define sym (lambda (a)
                       (proc
                         push_var a
                         sym
                         )))

         (define chr (lambda (a)
                       (proc
                         push_var a
                         chr
                         )))

         (define int (lambda (a)
                       (proc
                         push_var a
                         int
                         )))

         (define byt (lambda (a)
                       (proc
                         push_var a
                         byte
                         )))

         (define add (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         add
                         )))

         (define sub (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         sub
                         )))

         (define mul (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         mul
                         )))

         (define div (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         div
                         )))

         (define rem (lambda (a b)
                       (proc
                         push_var a
                         push_var b
                         rem
                         )))

         (define nth (lambda (place ls)
                       (proc
                         push_var place
                         push_var ls
                         nth
                         )))

         (define length (lambda (ls)
                          (proc
                            push_var ls
                            length
                            )))

         (define appd (lambda (a b)
                        (proc
                          push_var a
                          push_var b
                          appd
                          )))
        (define append (lambda b
                         (define iter (lambda (c r)
                                        (cond ((null c) r)
                                              (1 (iter (cdr c) (appd r (car c)))))))
                         (iter b nil)))
         (define file (lambda (name mode)
                        (proc
                          push_var name
                          push_var mode
                          file
                          )))

         (define read (lambda (fp)
                        (proc
                          push_var fp
                          read
                          )))

         (define getb (lambda (size fp)
                        (proc
                          push_var size
                          push_var fp
                          getb
                          )))

         (define write (lambda (obj fp)
                         (proc
                           push_var obj
                           push_var fp
                           write
                           )))

         (define putb (lambda (byts fp)
                        (proc
                          push_var byts
                          push_var fp
                          putb
                          )))

         (define princ (lambda (obj fp)
                         (proc
                           push_var obj
                           push_var fp
                           princ
                           )))

         (define go (lambda (f,a)
                      (proc
                        push_var f
                        push_var a
                        go
                        )))

         (define chanl (lambda (size)
                         (proc
                           push_var size
                           chanl
                           )))

         (define send (lambda (obj ch)
                        (proc
                          push_var obj
                          push_var ch
                          send
                          )))

         (define recv (lambda (ch)
                        (proc
                          push_var ch
                          recv
                          )))

         (define clcc (lambda (f)
                        (proc
                          $cc
                          pack_cc
                          pop_var cc
                          set_bp
                          push_var cc
                          push_var f
                          invoke
                          )))

         (define dll (lambda (dllName)
                       (proc
                         push_var dllName
                         dll)))
         (define dlsym (lambda (dl sym)
                         (proc
                           push_var dl
                           push_var sym
                           dlsym)))

         (define error (lambda (type message)
                         (proc
                           push_var type
                           push_var message
                           error)))

         (define raise (lambda (err)
                         (proc
                           push_var err
                           raise)))

         (define + (lambda (a,b)
                     (cond (b (add a (aply + b)))
                           (1 a))))

         (define - (lambda (a,b)
                     (cond (b (sub a (aply + b)))
                           (1 (sub 0 a)))))

         (define * (lambda (a,b)
                     (cond (b (mul a (aply * b)))
                           (1 a))))

         (define / (lambda (a,b)
                     (cond (b (div a (aply * b)))
                           (1 a))))

         (define map
           (lambda (f,l)
             (define sub-map
               (lambda (f l)
                 (define sub-map-iter
                   (lambda (f c p)
                     (cond ((null c) (appd p nil))
                           (1 (sub-map-iter f
                                            (cdr c)
                                            (appd p (cons (f (car c))
                                                          nil)))))))
                 (sub-map-iter f l nil)))
             (define map-iter
               (lambda (f l p)
                 (cond ((null (car l)) (appd p nil))
                       (1 (map-iter f
                                    (sub-map cdr l)
                                    (appd p (cons (aply f
                                                        (sub-map car l))
                                                  nil)))))))
             (map-iter f l nil)))

         (define fprint
           (lambda (f,l)
             (define p-iter
               (lambda (c)
                 (cond (c (princ (car c) f)
                          (p-iter (cdr c))))))
             (p-iter l)))

         (define print
           (lambda l
             (aply fprint (cons stdout l))))

         (define fwrite
           (lambda (f,l)
             (define w-iter
               (lambda (c)
                 (cond (c (write (car c) f)
                          (w-iter (cdr c))))))
             (w-iter l)))

         (define square
           (lambda (x)
             (mul x x)))

         (defmacro "'(a)" (proc
                            push_pair
                            push_sym "quote"
                            pop_car
                            push_pair
                            push_var a
                            pop_car
                            pop_cdr))
         (defmacro "`(a)" (proc
                            push_pair
                            push_sym "qsquote"
                            pop_car
                            push_pair
                            push_var a
                            pop_car
                            pop_cdr))
         (defmacro "~(a)" (proc
                            push_pair
                            push_sym "unquote"
                            pop_car
                            push_pair
                            push_var a
                            pop_car
                            pop_cdr))
         (defmacro "~@(a)" (proc
                             push_pair
                             push_sym "unqtesp"
                             pop_car
                             push_pair
                             push_var a
                             pop_car
                             pop_cdr))
         (defmacro "[(,a)]" (proc
                              push_var a))

         (defmacro
           (let $d,$b)
           (begin
             (define args nil)
             (define vals nil)
             (cond ((eq (type d) (quote sym))
                    (setq
                      args
                      (map (lambda (sd) (nth 0 sd)) (car b)))
                    (setq
                      vals
                      (map (lambda (sd) (nth 1 sd)) (car b)))
                    (qsquote (let ()
                               (define (unquote d)
                                 (lambda (unquote args)
                                   (unqtesp (cdr b))))
                               (unquote (cons d vals))))
                    )
                   ((eq (type d) (quote pair))
                    (setq args
                          (map (lambda (sd) (nth 0 sd)) d))
                    (setq vals
                          (map (lambda (sd) (nth 1 sd)) d))
                    (qsquote ((lambda (unquote args) (unqtesp b)) (unqtesp vals)))
                    )
                   (1 (raise (error (quote syntax-error) "error:Wrong type of object behind key word:let\n")))
                   )))

         (defmacro
           (let* $d,$b)
           (cond ((or (not (eq (type d) (quote pair)))
                      (le (length d) 1))
                  (qsquote (let (unquote d) (unqtesp b))))
                 (1
                  (qsquote (let ((unquote (car d)))
                             (let* (unquote (cdr d)) (unqtesp b)))))))

         (defmacro
           (letrec $d,$b)
           (begin
             (define dfs (map (lambda (sd) (qsquote (define (unquote (car sd)) (unqtesp (cdr sd))))) d))
             (qsquote (let () (unqtesp dfs) (unqtesp b)))))

         (defmacro
           (letcc $t,$b)
           (qsquote (clcc (lambda ((unquote t)) (unqtesp b)))))

         (defmacro (if $condition $exp1,$exp2)
           (qsquote (cond ((unquote condition) (unquote exp1))
                          (unquote (cons 1 exp2)))))

         (defmacro (case $v,$b)
           (begin
             (define body (let ((tb (map (lambda (x) (cdr x)) b))
                                (cs (map (lambda (x)
                                           (if (eq (type x) (quote pair))
                                             (cons (quote or)
                                                   (map (lambda (x) (qsquote (equal (unquote v) (unquote x)))) x))
                                             x))
                                         (map (lambda (x) (nth 0 x)) b))))
                            (map (lambda (x)
                                   (define r (cons x (car tb)))
                                   (setq tb (cdr tb))
                                   r)
                                 cs)
                            ))
             (qsquote (cond,(unquote body)))))

         (defmacro (define  ($name,$args),$body)
           (qsquote (define (unquote name)
                      (lambda (unquote args)
                        (unqtesp body)))))
         )
