;export
;  caar cadr cdar cddr
;  caaar caadr cadar caddr
;  cdaar cdadr cddar cdddr
;  caaaar caaadr caadar caaddr
;  cadaar cadadr caddar cadddr
;  cdaaar cdaadr cdadar cdaddr
;  cddaar cddadr cdddar cddddr
;  square min max
;  merge-sort! merge-sort
;  times
;  vector-merge-sort! vector-merge-sort
;  dvec-merge-sort! dvec-merge-sort

(import (.. dvec))

(export
  (define (caar a) (car (car a)))

  (define (cadr a) (car (cdr a)))

  (define (cdar a) (cdr (car a)))

  (define (cddr a) (cdr (cdr a)))

  (define (caaar a) (car (car (car a))))

  (define (caadr a) (car (car (cdr a))))

  (define (cadar a) (car (cdr (car a))))

  (define (caddr a) (car (cdr (cdr a))))

  (define (cdaar a) (cdr (car (car a))))

  (define (cdadr a) (cdr (car (cdr a))))

  (define (cddar a) (cdr (cdr (car ))))

  (define (cdddr a) (cdr (cdr (cdr a))))

  (define (caaaar a) (car (car (car (car a)))))

  (define (caaadr a) (car (car (car (cdr a)))))

  (define (caadar a) (car (car (cdr (car a)))))

  (define (caaddr a) (car (car (cdr (cdr a)))))

  (define (cadaar a) (car (cdr (car (car a)))))

  (define (cadadr a) (car (cdr (car (cdr a)))))

  (define (caddar a) (car (cdr (cdr (car a)))))

  (define (cadddr a) (car (cdr (cdr (cdr a)))))

  (define (cdaaar a) (cdr (car (car (car a)))))

  (define (cdaadr a) (cdr (car (car (cdr a)))))

  (define (cdadar a) (cdr (car (cdr (car a)))))

  (define (cdaddr a) (cdr (car (cdr (cdr a)))))

  (define (cddaar a) (cdr (cdr (car (car a)))))

  (define (cddadr a) (cdr (cdr (car (cdr a)))))

  (define (cdddar a) (cdr (cdr (cdr (car a)))))

  (define (cddddr a) (cdr (cdr (cdr (cdr a)))))

  (define (square x) (* x x))

  (define (min a b) (if (< a b) a b))

  (define (max a b) (if (> a b) a b)))

(export
  (define (list-merge-sort! cmpf l)
    (if (and l (cdr l))
      (let [(h (do [(h (cons nil l) (cdr h))
                    (s l (cdr s))
                    (f (and l (cdr l)) (cdr f))]
                 [(not f) (begin (cdr-set! h nil) s)]))]
        (let [(l (list-merge-sort! cmpf l))
              (h (list-merge-sort! cmpf h))
              (head '((),()))]
          (do [(c head (cdr c))
               (l l)
               (h h)]
            [(not (and l h)) (cdr-set! c (if l l h))]
            (let* [(cl (car l))
                   (ch (car h))]
              (cond
                [(cmpf cl ch)
                 (cdr-set! c (cons cl nil))
                 (setq l (cdr l))]
                [1
                 (cdr-set! c (cons ch nil))
                 (setq h (cdr h))])))
          (cdr head)))
      l)))

(export (define (list-merge-sort cmpf ls) (list-merge-sort! cmpf (copy ls))))

(export
  (define (times f t)
    (do [(c 0 (setq c (1+ c)))]
      [(>= c t)]
      (f))))

(export
  (define (vector-merge-sort! cmpf vec)
    (let* [(len (length vec))
           (a vec)
           (b (make-vector len))
           (mid (// len 2))]
      (do [(seg 1 (+ seg seg))]
        [(>= seg len)]
        (do [(start 0 (+ start seg seg))]
          [(>= start len)]
          (let [(mid (+ start seg))
                (high (+ start seg seg))]
            (let [(l start)
                  (m (if (< mid len) mid len))
                  (h (if (< high len) high len))]
              (let [(k l)
                    (s1 l)
                    (e1 m)
                    (s2 m)
                    (e2 h)]
                (do []
                  [(or (>= s1 e1) (>= s2 e2))]
                  (let [(v1 (vector-ref a s1))
                        (v2 (vector-ref a s2))]
                    (vector-set! b k (if (cmpf v1 v2)
                                    (begin (setq s1 (1+ s1)) v1)
                                    (begin (setq s2 (1+ s2)) v2))))
                  (setq k (1+ k)))

                (do []
                  [(>= s1 e1)]
                  (vector-set! b k (vector-ref a s1))
                  (setq k (1+ k))
                  (setq s1 (1+ s1)))

                (do []
                  [(>= s2 e2)]
                  (vector-set! b k (vector-ref a s2))
                  (setq k (1+ k))
                  (setq s2 (1+ s2)))))))
        (let [(t a)] (setq a b) (setq b t)))
      (unless (eq a vec)
        (do [(i 0 (1+ i))]
          [(>= i len)]
          (vector-set! b i (vector-ref a i))))
      a))
  (define (vector-merge-sort cmpf vec)
    (vector-merge-sort! cmpf (copy vec))))

(export
  (define (dvec-merge-sort! cmpf dvec)
    (let* [(len (length dvec))
           (a dvec)
           (b (make-dvec len))
           (mid (// len 2))]
      (do [(seg 1 (+ seg seg))]
        [(>= seg len)]
        (do [(start 0 (+ start seg seg))]
          [(>= start len)]
          (let [(mid (+ start seg))
                (high (+ start seg seg))]
            (let [(l start)
                  (m (if (< mid len) mid len))
                  (h (if (< high len) high len))]
              (let [(k l)
                    (s1 l)
                    (e1 m)
                    (s2 m)
                    (e2 h)]
                (do []
                  [(or (>= s1 e1) (>= s2 e2))]
                  (let [(v1 (dvec-ref a s1))
                        (v2 (dvec-ref a s2))]
                    (dvec-set! b k (if (cmpf v1 v2)
                                     (begin (setq s1 (1+ s1)) v1)
                                     (begin (setq s2 (1+ s2)) v2))))
                  (setq k (1+ k)))

                (do []
                  [(>= s1 e1)]
                  (dvec-set! b k (dvec-ref a s1))
                  (setq k (1+ k))
                  (setq s1 (1+ s1)))

                (do []
                  [(>= s2 e2)]
                  (dvec-set! b k (dvec-ref a s2))
                  (setq k (1+ k))
                  (setq s2 (1+ s2)))))))
        (let [(t a)] (setq a b) (setq b t)))
      (unless (eq a dvec)
        (do [(i 0 (1+ i))]
          [(>= i len)]
          (dvec-set! b i (dvec-ref a i))))
      a))
  (define (dvec-merge-sort cmpf dvec)
    (dvec-merge-sort! cmpf (copy dvec))))

(export
  (define (msort! cmpf s)
    (cond
      [(vector? s)
       (vector-merge-sort! cmpf s)]
      [(dvec? s)
       (dvec-merge-sort! cmpf s)]
      [(list? s)
       (list-merge-sort! cmpf s)]
      [1 (throw 'incorrect-type (format "%S is not a vector, dvec or list" s))]))
  (define (msort cmpf s)
    (cond
      [(vector? s)
       (vector-merge-sort cmpf s)]
      [(dvec? s)
       (dvec-merge-sort cmpf s)]
      [(list? s)
       (list-merge-sort cmpf s)]
      [1 (throw 'incorrect-type (format "%S is not a vector, dvec or list" s))])))
