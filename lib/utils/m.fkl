(export
  (defmacro ~(case (~s ~v),~b)
    (begin
      (define body
        (let [(tb (map (lambda (x) (cdr x)) b))
              (cs (map (lambda (x)
                         (if (pair? x)
                           `(member ~s '~x)
                           x))
                       (map (lambda (x) (nth 0 x)) b)))]
          (map (lambda (x)
                 (define r (cons x (car tb)))
                 (setq tb (cdr tb))
                 r)
               cs)))
      `((lambda (~s) (cond,~body)) ~v)))

  (defmacro ~(->> ~x,~forms)
    (begin
      (define car-forms (car forms))
      (let iter [(c (cdr forms))
                 (r (if (pair? car-forms)
                      `(~@car-forms ~@`(~x))
                      `(~car-forms,(~x))))]
        (if c
          (begin
            (define car-c (car c))
            (iter (cdr c)
                  (if (pair? car-c)
                    `(~@car-c ~@`(~r))
                    `(~car-c,(~r)))))
          r))))

  (defmacro ~(-> ~x,~forms)
    (begin
      (define car-forms (car forms))
      (let iter [(c (cdr forms))
                 (r (if (pair? car-forms)
                      `(~(car car-forms)
                         ~@`(~x)
                         ,~(cdr car-forms))
                      `(~car-forms,(~x))))]
        (if c
          (begin
            (define car-c (car c))
            (iter (cdr c)
                  (if (pair? car-c)
                    `(~(car car-c)
                       ~@`(~r)
                       ,~(cdr car-c))
                    `(~car-c,(~r)))))
          r)))))

