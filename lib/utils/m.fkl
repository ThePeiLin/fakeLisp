(export
  (defmacro ~(case (~s ~v),~b)
    (begin
      (define body
        (let [(tb (map (lambda (x) (cdr x)) b))
              (cs (map (lambda (x)
                         (if (pair? x)
                           `(member ~s '~x)
                           x))
                       (map (lambda (x) (nth 0 x)) b)))]
          (map (lambda (x)
                 (define r (cons x (car tb)))
                 (setq tb (cdr tb))
                 r)
               cs)))
      `(let [(~s ~v)]
         (cond,~body))))

  (defmacro ~(->> ~x,~forms)
    (let [(carc (car forms))]
      (do [(c (cdr forms) (cdr c))
           (r (if (pair? carc)
                `(~@carc ~@`(~x))
                `(~carc,(~x)))
              (if (pair? carc)
                `(~@carc ~@`(~r))
                `(~carc,(~r))))]
        [(null c) r]
        (setq carc (car c)))))

  (defmacro ~(assert ~exp)
    `(unless ~exp
       (throw 'assert-fail
              ~(append! "expression " (stringify (stringify exp)) " failed"))))

  (defmacro ~(assert ~exp ~message)
    `(unless ~exp
       (throw 'assert-fail
              ~message)))

  (defmacro ~(-> ~x,~forms)
    (let [(carc (car forms))]
      (do [(c (cdr forms) (cdr c))
           (r (if (pair? carc)
                `(~(car carc) ~@`(~x) ,~(cdr carc))
                `(~carc,(~x)))
              (if (pair? carc)
                `(~(car carc) ~@`(~r) ,~(cdr carc))
                `(~carc,(~x))))]
        [(null c) r]
        (setq carc (car c)))))

  (defmacro ~(static-strcat,~rest)
    (apply append! rest))

  (defmacro ~(load-as-str ~filename)
    (begin
      (define fp (fopen filename))
      (define len (fseek fp 0 'end))
      (fseek fp 0)
      (fgets len fp)))

  (defmacro ~(load-as-bvec ~filename)
    (begin
      (define fp (fopen filename "rb"))
      (define len (fseek fp 0 'end))
      (fseek fp 0)
      (fgetb len fp)))

  (defmacro ~(load-as-list ~filename)
    (begin
      (define fp (fopen filename "r"))
      `'~(reverse!
           (do [(retval '() (cons cur retval))
                (cur (read fp) (read fp))]
             [(eof? cur) retval]))))

  (defmacro ~(load-as-vec ~filename)
    (begin
      (define fp (fopen filename "r"))
      `#(~@(reverse!
             (do [(retval '() (cons cur retval))
                  (cur (read fp) (read fp))]
               [(eof? cur) retval]))))))

