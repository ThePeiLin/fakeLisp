(import (only (.. lib utils m) assert))

(define code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")

(define m #vd(0))

(define mp 0)

(define ins #vd())

(define stack #vd())

(define cp 0)

(define (move n)
  (setq mp (+ mp n))
  (if (< mp 0)
    (begin
      (dvec-insert! m 0 (- mp) 0)
      (setq mp 0))
    (unless (< mp (length m))
      (dvec-resize! m (1+ mp) 0))))

(define (add num)
  (define c (dvec-ref m mp))
  (dvec-set! m mp (+ c num)))

(define (ou _)
  (princ (integer->char (dvec-ref m mp)) stdout))

(define (in _)
  (dvec-set! m mp (fgeti stdin)))

(define (jf label)
  (if (eqv (dvec-ref m mp) 0)
    (setq cp label)))

(define (jt label)
  (unless (eqv (dvec-ref m mp) 0)
    (setq cp label)))

(define prev-ins nil)

(do [(c 0 (1+ c))
     (len (length code))]
  [(>= c len)]
  (define cc (str-ref code c))
  (define cur-ins nil)
  (cond
    [(eq cc #\>)
     (if (and prev-ins (eq (car prev-ins) move))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons move 1))
         (dvec-push! ins cur-ins)))]

    [(eq cc #\<)
     (if (and prev-ins (eq (car prev-ins) move))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (-1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons move -1))
         (dvec-push! ins cur-ins)))]

    [(eq cc #\+)
     (if (and prev-ins (eq (car prev-ins) add))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons add 1))
         (dvec-push! ins cur-ins)))]

    [(eq cc #\-)
     (if (and prev-ins (eq (car prev-ins) add))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (-1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons add -1))
         (dvec-push! ins cur-ins)))]

    [(eq cc #\.)
     (setq cur-ins (list ou))
     (dvec-push! ins cur-ins)]
    [(eq cc #\,)
     (setq cur-ins (list in))
     (dvec-push! ins cur-ins)]
    [(eq cc #\[)
     (dvec-push! stack (length ins))
     (dvec-push! ins nil)]
    [(eq cc #\])
     (assert (not (dvec-empty? stack)))
     (define l (dvec-pop! stack))
     (assert (not (dvec-ref ins l)))
     (setq cur-ins (cons jt (-1+ l)))
     (dvec-set! ins l (cons jf (-1+ (length ins))))
     (dvec-push! ins cur-ins)])
  (setq prev-ins cur-ins))

(do [(len (length ins))]
  [(>= cp len)]
  (define c (dvec-ref ins cp))
  ((car c) (cdr c))
  (setq cp (1+ cp)))
