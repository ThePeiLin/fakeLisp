(import (.. lib utils m))

(define code nil)

(define (read-code fp)
  (let loop [(s "")
             (c (fgetc fp))]
    (if c
      (loop (append s (string c)) (fgetc fp))
      s)))
(if (<= (length (argv)) 1)
  (setq code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")
  (setq code
    (let* ((fp (fopen (nth 1 (argv)) "rb"))
           (code (read-code fp)))
      (fclose fp)
      code)))

(define m #(0))

(define len (length code))

(define stack nil)
(let iter ((cp 0)
           (mp 0))
  (when (< cp len)
    (define op (sref code cp))
    (cond
      [(eq op #\>)
       (setq mp (1+ mp))
       (if (>= mp (length m))
         (append! m #(0)))]
      [(eq op #\<)
       (if (<= mp 0)
         (setq m (append! #(0) m))
         (setq mp (-1+ mp)))]
      [(eq op #\+)
       (define c (vref m mp))
       (set-vref! m mp (1+ c))]
      [(eq op #\-)
       (define c (vref m mp))
       (set-vref! m mp (-1+ c))]
      [(eq op #\.)
       (princ (integer->char (vref m mp)))]
      [(eq op #\,)
       (set-vref! m mp (fgeti stdin))]
      [(eq op #\[)
       (setq stack (cons cp stack))]
      [(eq op #\])
       (if (> (vref m mp) 0)
         (setq cp (car stack))
         (setq stack (cdr stack)))]
      [1 (setq cp (1+ cp))])
    (iter (1+ cp) mp)))
