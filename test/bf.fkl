(import (only (.. .. lib utils m) assert))

(define code "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")

(define m #(0))

(define mp 0)

(define ins #())

(define stack nil)

(define cp 0)

(define (move n)
  (setq mp (+ mp n))
  (if (< mp 0)
    (begin
      (setq m (append! (make-vector (- mp) 0) m))
      (setq mp 0))
    (unless (< mp (length m))
      (append! m (make-vector (1+ (- mp (length m))) 0)))))

(define (add num)
  (define c (vec-ref m mp))
  (vec-set! m mp (+ c num)))

(define (ou _)
  (princ (integer->char (vec-ref m mp)) stdout))

(define (in _)
  (vec-set! m mp (fgeti stdin)))

(define (jf label)
  (if (eqv (vec-ref m mp) 0)
    (setq cp label)))

(define (jt label)
  (if (not (eqv (vec-ref m mp) 0))
    (setq cp label)))

(define prev-ins nil)

(do [(c 0 (1+ c))
     (len (length code))]
  [(>= c len)]
  (define cc (str-ref code c))
  (define cur-ins nil)
  (cond
    [(eq cc #\>)
     (if (and prev-ins (eq (car prev-ins) move))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons move 1))
         (append! ins (vector cur-ins))))]

    [(eq cc #\<)
     (if (and prev-ins (eq (car prev-ins) move))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (-1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons move -1))
         (append! ins (vector cur-ins))))]

    [(eq cc #\+)
     (if (and prev-ins (eq (car prev-ins) add))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons add 1))
         (append! ins (vector cur-ins))))]

    [(eq cc #\-)
     (if (and prev-ins (eq (car prev-ins) add))
       (begin
         (setq cur-ins prev-ins)
         (cdr-set! prev-ins (-1+ (cdr prev-ins))))
       (begin
         (setq cur-ins (cons add -1))
         (append! ins (vector cur-ins))))]

    [(eq cc #\.)
     (setq cur-ins (list ou))
     (append! ins (vector cur-ins))]
    [(eq cc #\,)
     (setq cur-ins (list in))
     (append! ins (vector cur-ins))]
    [(eq cc #\[)
     (setq stack (cons (length ins) stack))
     (append! ins #(()))]
    [(eq cc #\])
     (assert stack)
     (define l (car stack))
     (setq stack (cdr stack))
     (assert (not (vec-ref ins l)))
     (setq cur-ins (cons jt (-1+ l)))
     (vec-set! ins l (cons jf (-1+ (length ins))))
     (append! ins (vector cur-ins))])
  (setq prev-ins cur-ins))

(do [(len (length ins))]
  [(>= cp len)]
  (define c (vec-ref ins cp))
  ((car c) (cdr c))
  (setq cp (1+ cp)))
