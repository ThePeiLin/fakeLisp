(println "\ncompile check test")

;; 1
(println (cfg *main?*))

;; 1
(println (cfg (and)))

;; ()
(println
  (cfg
    (and (not bar)
      (and *main?* (not foo))
      (and (not *main?*) (not foo)))))

;; 1
(println
  (cfg
    (and (not bar)
      (and *main?* (not foo)))))

;; 1
(println
  (cfg
    (not (and (not bar)
           (and *main?* (not foo))
           (and (not *main?*) (not foo))))))

;; ()
(println (cfg (or)))

;; 1
(println
  (cfg
    (or bar
      (or *main?* foo))))

;; ()
(println
  (cfg
    (or bar
      (or (not *main?*) foo))))

;; 1
(println (cfg (import (.. lib json))))

;; ()
(println (cfg (import (foobar))))

(defmacro foo 'bar)
(defmacro ~(foobar) 'foobar)

(defmacro #&foobar
  #(#[#&"/\\*\\*/|^/\\*.*\\*/$"]))

(println (cfg (defmacro foo))) ;; 1
(println (cfg (defmacro (foobar)))) ;; 1
(println (cfg (defmacro #(foobar)))) ;; 1

;; 1
(println (cfg (and
                (defmacro foo)
                (defmacro (foobar))
                (defmacro #(foobar)))))

(println (cfg (defmacro bar))) ;; ()
(println (cfg (defmacro (barfoo)))) ;;()
(println (cfg (defmacro #(barfoo)))) ;;()

;; ()
(println (cfg (or
                (defmacro bar)
                (defmacro (barfoo))
                (defmacro #(barfoo)))))

;; main!
(cfg *main?* (println "main!"))

;; 1
(println (cfg (eq *main?* 1)))

;; main
(cfg
  *main?* (println "main")
  (define foo) (println foo)
  (import (lib json)) (println '(lib json))
  (defmacro foo) (println foo)
  (defmacro (cc)) (println '(cc))
  (defmacro #(cc)) (println '#(cc))
  (or (import (lib json))
    (define foo)
    *main?*)
  (println "json or main or foo")
  (and (import (lib json))
    (define foo)
    *main?*)
  (println "json and main and foo")
  (not (import (lib json)))
  (println "not has (lib json)"))

(cfg (eq *platform* "win32") (println "win32!")
  1 (println "not win32!"))

(cfg
  (eq *platform* "linux") (println "linux!")
  1 (println "not linux!"))

;; always
(cfg 1 (println "always"))

(println "done!")

(defmacro foobar (foo))

(defmacro version #(114 514 19))

(defmacro manifest #hash((foo,114) (bar,514)))

(println (cfg (match foobar ~(foo))))

(println (cfg (match foobar ~(~*))))

(println (cfg (match version ~#(114 ~* ~*))))

(println (cfg (match version ~#(514 ~* ~*))))

(println (cfg (match manifest ~#hash((foo,~*) (bar,~*)))))

(define sys-info
  (cfg
    (eq *platform* "linux") "linux"
    1 "other"))

(printf "the system is %s\n" sys-info)
