(define max 100)
(define buf (chanl 100))

(define (producer no.)
  (define number-str (number->string no.))
  (princ (append! "producer no."
                  number-str
                  " start!\n"))
  (do [(c 0 (1+ c))]
    [(>= c max)]
    (princ (append! "producer no."
                    number-str
                    ": "
                    (number->string c)
                    "\n"))
    (send buf c))
  (princ (append! "producer no."
                  number-str
                  " exit\n")))

(define (consumer no.)
  (define number-str (number->string no.))
  (princ (append! "consumer no."
                  number-str
                  " start!\n"))
  (do [(c 0 (1+ c))]
    [(>= c max)]
    (princ (append! "consumer no."
                    number-str
                    ": "
                    (number->string (recv buf))
                    "\n")))
  (princ (append! "consumer no."
                  number-str
                  " exit\n")))

(do [(c 0 (1+ c))]
  [(>= c max)]
  (go producer c)
  (go consumer c))

