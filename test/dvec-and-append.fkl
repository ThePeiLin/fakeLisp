(import (only (.. lib utils) assert))

(define v #(foo bar))
(println (vec-ref v 0))
(println (vec-first v))
(assert (eq (vec-first v) 'foo))
(println (vec-last v))
(assert (eq (vec-last v) 'bar))

(prin1n (define vd #d(1 2 3 4 5)))
(prin1n (dvec-insert! vd 2 'foo))
(prin1n (dvec-insert! vd 3 'bar))
(prin1n (dvec-insert! vd 0 'foobar))
(prin1n vd)
(prin1n (length vd))
(assert (eqv (length vd) 8))
(prin1n (dvec-capacity vd))
(assert (eqv (dvec-capacity vd) 10))

(prin1n (define vd #d(1 2 3 4 5 6)))
(prin1n (dvec-insert! vd 2 10 'foo))
(printf "capacity %s\n" (dvec-capacity vd))
(assert (eqv (dvec-capacity vd) 16))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 16))
(prin1n (dvec-insert! vd 3 2 'bar))
(printf "capacity: %s\n" (dvec-capacity vd))
(assert (eqv (dvec-capacity vd) 32))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 18))
(prin1n (dvec-insert! vd 3 0 'bar))
(printf "capacity: %s\n" (dvec-capacity vd))
(assert (eqv (dvec-capacity vd) 32))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 18))

(define another-vd  (copy vd))
(prin1n another-vd)

(printf "capacity %s\n" (dvec-capacity another-vd))
(assert (eqv (dvec-capacity another-vd) 18))
(printf "length: %s\n" (length another-vd))
(assert (eqv (length another-vd) 18))

(define len (+ (length vd)
               (length another-vd)
               (length #(114 514))))

(prin1n (append! vd another-vd #d(114 514)))
(printf "expect length: %s, actual length: %s\n"
        len
        (length vd))
(assert (eqv len (length vd)))

(define len (+ (length vd)
               (length another-vd)
               (length #(114 514))))
(define vvd (append vd another-vd #d(114 514)))
(prin1n vvd)
(printf "expect length: %s, actual length: %s\n"
        len
        (length vvd))
(assert (eqv len (length vvd)))


(define s "foo")
(prin1n (append s "bar" "114" "514"))
(assert (equal (append s "bar" "114" "514")
               "foobar114514"))
(append! s "bar" "114" "514")
(prin1n s)
(assert (equal s "foobar114514"))

(define b #vu8(1 2 3))
(prin1n (append b #vu8(4 5 6) #vu8(11 22 33) #vu8(44 55 66)))
(assert (equal (append b #vu8(4 5 6) #vu8(11 22 33) #vu8(44 55 66))
               #vu8(1 2 3 4 5 6 11 22 33 44 55 66)))
(append! b #vu8(4 5 6) #vu8(11 22 33) #vu8(44 55 66))
(prin1n b)
(assert (equal b #vu8(1 2 3 4 5 6 11 22 33 44 55 66)))

(define v #(foo bar))
(prin1n (append v #(bar foo)))
(assert (equal (append v #(bar foo))
               #(foo bar bar foo)))

(define l '(1 2 3))
(prin1n (append l '(4 5 6) '(7 8 9)))
(assert (equal (append l '(4 5 6) '(7 8 9))
               '(1 2 3 4 5 6 7 8 9)))
(append! l '(4 5 6) '(7 8 9))
(prin1n l)
(assert (equal l '(1 2 3 4 5 6 7 8 9)))

(prin1n (pmatch '~#d(~a ~b) #d(foo bar)))

(define v #(foo bar))
(prin1n (append v #d(bar foo) #(114 514) #d(foobar)))
(assert (equal (append v #d(bar foo) #(114 514) #d(foobar))
               #(foo bar bar foo 114 514 foobar)))

(define vd #d(foo bar))
(prin1n (append vd #(bar foo) #d(114 514) #(foobar)))
(assert (equal (append vd #(bar foo) #d(114 514) #(foobar))
               #d(foo bar bar foo 114 514 foobar)))

(append! vd #(bar foo) #d(114 514) #(foobar))
(prin1n vd)
(assert (equal vd #d(foo bar bar foo 114 514 foobar)))
