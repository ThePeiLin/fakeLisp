(import (prefix (.. lib fuv) uv-))

(import (only (.. lib utils m) assert))

(define loop (uv-make-loop))

(define timer (uv-make-timer loop))

(define prepare (uv-make-prepare loop))

(define uv-idle (uv-make-idle loop))

(assert (uv-timer? timer))
(assert (uv-handle? timer))

(assert (uv-prepare? prepare))
(assert (uv-handle? prepare))

(assert (uv-idle? uv-idle))
(assert (uv-handle? uv-idle))

(println (uv-handle-type timer))
(println (uv-handle-type prepare))
(println (uv-handle-type uv-idle))

(uv-timer-start! timer
                 (lambda ()
                   (println "time out!")
                   (uv-timer-stop! timer)
                   (uv-handle-close! timer (lambda () (println "timer closing!"))))
                 50
                 500)

(define flags 'idle)

(uv-prepare-start! prepare
                   (lambda ()
                     (assert (eq flags 'prepare))
                     (println "preparing!")
                     (uv-prepare-stop! prepare)
                     (uv-handle-close! prepare (lambda () (println "prepare closing!")))))

(uv-idle-start! uv-idle
                (lambda ()
                  (assert (eq flags 'idle))
                  (println "in idle!")
                  (uv-idle-stop! uv-idle)
                  (uv-handle-close! uv-idle (lambda () (println "idle closing!")))
                  (setq flags 'prepare)))

(uv-loop-walk loop println)

(uv-loop-run! loop 'default)

(define timer (uv-make-timer loop))

(uv-timer-start! timer
                 (lambda ()
                   (println "time out again!")
                   (uv-loop-stop! loop)
                   (println "stop the loop!"))
                 50
                 500)

(uv-loop-configure! loop 'loop-block-signal 'sigprof)
(uv-loop-configure! loop 'metrics-idle-time)

(uv-loop-walk loop println)

(uv-loop-run! loop)

(uv-handle-close! timer)

(define timer (uv-make-timer loop))

(define count 0)

(uv-timer-start! timer
                 (lambda ()
                   (printf "count is %d\n" count)
                   (setq count (1+ count))
                   (when (> count 9)
                     (uv-handle-close! timer)))
                 50
                 50)

(uv-loop-run! loop)

(printf "count is %d in top\n" count)
