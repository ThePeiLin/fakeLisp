(import (prefix (.. .. lib fuv) uv-))

(import (only (.. .. lib utils m) assert))

(define loop (uv-make-loop))

;; get all local http addresses synchronously
(define res (uv-getaddrinfo loop nil "http"))
(assert res)
(println "get all local http addresses synchronously")
(foreach prin1n res)
(newline)

;; get all local http addresses asynchronously
(define req-get-localhost
  (uv-getaddrinfo loop
                  nil
                  "http"
                  (lambda (err res)
                    (when err (raise err))
                    (assert (eqv (hash-ref (car res) 'port) 80))
                    (println "get all local http addresses asynchronously")
                    (foreach prin1n res)
                    (newline))))

(assert (uv-req? req-get-localhost))
(assert (uv-getaddrinfo? req-get-localhost))
(assert (not (uv-getnameinfo? req-get-localhost)))

;; get only ipv4 tcp addresses for gitee.com asynchronously
(uv-getaddrinfo loop
                "gitee.com"
                nil
                (lambda (err res)
                  (when err (raise err))
                  (println "get only ipv4 tcp addresses for gitee.com asynchronously")
                  (assert res)
                  (foreach prin1n res)
                  (newline))
                'socktype 'stream
                'family 'inet)

;; get only ipv6 tcp addresses for gitee.com asynchronously
(check (defmacro test-ipv6)
  (uv-getaddrinfo loop
                  "gitee.com"
                  nil
                  (lambda (err res)
                    (when err (raise err))
                    (println "get only ipv6 tcp addresses for gitee.com asynchronously")
                    (foreach prin1n res)
                    (newline))
                  'socktype 'stream
                  'family 'inet6))

;; get ipv4 and ipv6 tcp addresses for gitee.com asynchronously
(uv-getaddrinfo loop
                "gitee.com"
                nil
                (lambda (err res)
                  (when err (raise err))
                  (assert res)
                  (println "get ipv4 and ipv6 tcp addresses for gitee.com asynchronously")
                  (foreach prin1n res)
                  (newline))
                'socktype 'stream)

;; get all addresses for gitee.com asynchronously
(uv-getaddrinfo loop
                "gitee.com"
                nil
                (lambda (err res)
                  (when err (raise err))
                  (assert res)
                  (println "get all addresses for gitee.com asynchronously")
                  (foreach prin1n res)
                  (newline)))

;; look up local ipv4 address synchronously
(define res (uv-getnameinfo loop nil 'family 'inet))
(assert res)
(println "look up local ipv4 address synchronously")
(prin1n res)
(newline)

;; lookup local ipv4 address asynchronously
(define req-lookup-localhost
  (uv-getnameinfo loop
                  (lambda (err hostname service)
                    (when err (raise err))
                    (assert hostname)
                    (assert service)
                    (println "lookup local ipv4 address asynchronously")
                    (prin1n (make-hash 'hostname hostname
                                       'serive service))
                    (newline))
                  'family 'inet))

(assert (uv-req? req-lookup-localhost))
(assert (uv-getnameinfo? req-lookup-localhost))
(assert (not (uv-getaddrinfo? req-lookup-localhost)))

;; lookup local 127.0.0.1 ipv4 address asynchronously
(uv-getnameinfo loop
                (lambda (err hostname service)
                  (when err (raise err))
                  (assert hostname)
                  (assert service)
                  (println "lookup local 127.0.0.1 ipv4 address asynchronously")
                  (prin1n (make-hash 'hostname hostname
                                     'service service))
                  (newline))
                'ip "127.0.0.1")

;; lookup local ipv6 address asynchronously
(uv-getnameinfo loop
                (lambda (err hostname service)
                  (when err (raise err))
                  (assert hostname)
                  (assert service)
                  (println "lookup local ipv6 address asynchronously")
                  (prin1n (make-hash 'hostname hostname
                                     'service service))
                  (newline))
                'family 'inet6)

;; lookup local ::1 ipv6 address asynchronously
(uv-getnameinfo loop
                (lambda (err hostname service)
                  (when err (raise err))
                  (assert hostname)
                  (assert service)
                  (println "lookup local ::1 ipv6 address asynchronously")
                  (prin1n (make-hash 'hostname hostname
                                     'service service))
                  (newline))
                'ip "::1")

;; lookup port 80 service asynchronously
(uv-getnameinfo loop
                (lambda (err hostname service)
                  (when err (raise err))
                  (assert hostname)
                  (assert service)
                  (assert (equal service "http"))
                  (println "lookup port 80 service asynchronously")
                  (prin1n (make-hash 'hostname hostname
                                     'service service))
                  (newline))
                'port 80
                'family 'inet6)

(uv-loop-run loop)
