(import (prefix (.. .. lib fuv) uv-))

(import (.. .. lib os))

(import (only (.. .. lib utils m) assert))

(define loop (uv-make-loop))

(define timer (uv-make-timer loop))

(define prepare (uv-make-prepare loop))

(define uv-idle (uv-make-idle loop))

(define uv-check (uv-make-check loop))

(assert (uv-timer? timer))
(assert (uv-handle? timer))

(assert (uv-prepare? prepare))
(assert (uv-handle? prepare))

(assert (uv-idle? uv-idle))
(assert (uv-handle? uv-idle))

(assert (uv-check? uv-check))
(assert (uv-handle? uv-check))

(println (uv-handle-type timer))
(println (uv-handle-type prepare))
(println (uv-handle-type uv-idle))

(define count 0)

(uv-timer-start timer
                (lambda ()
                  (printf "count is %d\n" count)
                  (setq count (1+ count))
                  (when (> count 9)
                    (uv-handle-close timer)))
                50
                50)

(define flags 'idle)

(uv-prepare-start prepare
                  (lambda ()
                    (assert (eq flags 'prepare))
                    (println "preparing!")
                    (uv-prepare-stop prepare)
                    (uv-handle-close prepare (lambda () (println "prepare closing!")))
                    (setq flags 'check)))

(uv-check-start uv-check
                (lambda ()
                  (assert (eq flags 'check))
                  (println "in check!")
                  (uv-check-stop uv-check)
                  (uv-handle-close uv-check (lambda () (println "check closing!")))
                  (setq flags 'idle)))

(uv-idle-start uv-idle
               (lambda ()
                 (assert (eq flags 'idle))
                 (println "in idle!")
                 (uv-idle-stop uv-idle)
                 (uv-handle-close uv-idle (lambda () (println "idle closing!")))
                 (setq flags 'prepare)))

(uv-loop-walk loop println)

(uv-loop-configure loop 'loop-block-signal 'sigprof)

(uv-loop-configure loop 'metrics-idle-time)

(uv-loop-run loop 'default)

(assert (eq 'fuv-handle-error
            (error-type (pcall uv-timer-start timer
                               (lambda ()
                                 (println "time out again!")
                                 (uv-loop-stop loop)
                                 (println "stop the loop!"))
                               50
                               500))))

(assert (eq 'fuv-handle-error
            (error-type
              (pcall uv-prepare-start prepare
                     (lambda ()
                       (assert (eq flags 'prepare))
                       (println "preparing!")
                       (uv-prepare-stop prepare)
                       (uv-handle-close prepare (lambda () (println "prepare closing!")))
                       (setq flags 'check))))))

(assert (eq 'fuv-handle-error
            (error-type
              (pcall uv-check-start uv-check
                     (lambda ()
                       (assert (eq flags 'check))
                       (println "in check!")
                       (uv-check-stop uv-check)
                       (uv-handle-close uv-check (lambda () (println "check closing!")))
                       (setq flags 'idle))))))

(assert (eq 'fuv-handle-error
            (error-type
              (pcall uv-idle-start uv-idle
                     (lambda ()
                       (assert (eq flags 'idle))
                       (println "in idle!")
                       (uv-idle-stop uv-idle)
                       (uv-handle-close uv-idle (lambda () (println "idle closing!")))
                       (setq flags 'prepare))))))

(printf "count is %d in top\n" count)

(define async
  (uv-make-async loop
                 (lambda args
                   (printf "async recv: %S\n" args)
                   (uv-handle-close async))))

(uv-async? async)
(uv-handle? async)

(uv-loop-walk loop println)

(go (lambda (async)
      (uv-async-send async 'foor 'bar)
      (println "other thread send!"))
    async)

(uv-loop-run loop)

(printf "TEST=%S\n" (getenv "TEST"))
(printf "cwd=%S\n" (getcwd))
(printf "idle-time=%S\n" (uv-metrics-idle-time loop))

(define (pretty-print-table ht)
  (define kv (hash->list ht))
  (println #\{)
  (foreach (lambda (kv)
             (printf "\t%S : %S\n" (car kv) (cdr kv)))
           kv)
  (println #\}))

(pretty-print-table (uv-metrics-info loop))
