(import (prefix (.. .. lib fuv) uv-))

(import (only (.. .. lib utils m) assert))

(define (pretty-print-table ht)
  (define kv (hash->list ht))
  (println #\{)
  (foreach (lambda (kv)
             (printf "\t%S : %S\n" (car kv) (cdr kv)))
           kv)
  (println #\}))

(define l (uv-make-loop))

(prin1n (uv-get-process-title))

(prin1n (uv-set-process-title "test"))
(assert (equal (uv-get-process-title)
               "test"))

(prin1n (uv-resident-set-memory))
(prin1n (uv-uptime))

(prin1n (uv-os-getpid))
(prin1n (uv-os-getppid))
(prin1n (uv-available-parallelism))
(prin1n (uv-cpumask-size))
(prin1n (uv-loadavg))
(define prev-cwd (uv-cwd))
(prin1n prev-cwd)
(uv-chdir "..")
(prin1n (uv-cwd))
(uv-chdir prev-cwd)
(prin1n (uv-cwd))
(prin1n (uv-os-homedir))
(prin1n (uv-os-tmpdir))
(prin1n (uv-get-free-memory))
(prin1n (uv-get-total-memory))
(prin1n (uv-get-constrained-memory))
(prin1n (uv-get-available-memory))
(prin1n (uv-hrtime))
(prin1n (uv-os-gethostname))
(prin1n (uv-sleep 500))
(pretty-print-table (uv-clock-gettime 'monotonic))
(pretty-print-table (uv-clock-gettime 'realtime))
(prin1n (uv-print-all-handles l stdout))
(prin1n (uv-print-active-handles l stdout))
(pretty-print-table (uv-gettimeofday))
(prin1n (uv-os-getenv "HOME"))
(prin1n (pcall uv-os-getenv "TEST_ENV"))
(prin1n (uv-os-setenv "TEST_ENV" "foobar"))
(prin1n (uv-os-getenv "TEST_ENV"))
(uv-os-unsetenv "TEST_ENV")
(prin1n (pcall uv-os-getenv "TEST_ENV"))
(pretty-print-table (uv-os-uname))
(pretty-print-table (uv-getrusage))
(prin1n (uv-os-getpriority (uv-os-getpid)))
(foreach pretty-print-table (vector->list (uv-cpu-info)))
(pretty-print-table (uv-os-get-passwd))
(foreach prin1n (vector->list (uv-os-environ)))
(define prev-prio (uv-os-getpriority (uv-os-getpid)))

(uv-os-setpriority (uv-os-getpid) 'normal)
(prin1n (uv-os-getpriority (uv-os-getpid)))
(uv-os-setpriority (uv-os-getpid) prev-prio)
(prin1n (uv-if-indextoname 1))
(prin1n (uv-if-indextoiid 1))
(foreach pretty-print-table (vector->list (uv-interface-addresses)))
(printf "sync uv-random: %S\n" (uv-random l 20))

(define (on-random err bvec)
  (when err (raise err))
  (printf "async uv-random: %S\n" bvec))

(define ran-req (uv-random l 20 on-random))

(assert (uv-req? ran-req))
(assert (uv-random? ran-req))
(uv-loop-run l)

