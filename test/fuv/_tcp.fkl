(import (prefix (.. .. lib fuv) uv-))

(import (only (.. .. lib utils m) assert))

(define loop (uv-make-loop))

(define tcp (uv-make-tcp loop))

(assert (uv-tcp? tcp))
(assert (uv-stream? tcp))
(assert (uv-handle? tcp))

(uv-tcp-nodelay tcp 1)
(uv-tcp-simultaneous-accepts tcp 1)
(assert (eq (error-type (prin1n (pcall uv-tcp-keepalive tcp 1)))
            'arg-error))
(assert (eq (error-type (prin1n (pcall uv-tcp-keepalive tcp nil 114)))
            'arg-error))
(uv-tcp-keepalive tcp 1 114)

(define socketpair (uv-socketpair 'stream nil 1 1))
(prin1n socketpair)

(define tcp (uv-make-tcp loop))

(uv-tcp-open tcp (cdr socketpair))

(prin1n (uv-tcp-sockname tcp))

(prin1n (uv-tcp-peername tcp))

(uv-tcp-close-reset tcp
                    (lambda ()
                      (assert (uv-handle-closing? tcp))))

(uv-loop-run loop)

(newline)
;; basic tcp server and client (ipv4)
(println ";; basic tcp server and client (ipv4)")

(define server (uv-make-tcp loop))

(uv-tcp-bind server "127.0.0.1" 0)

(define (on-connection err)
  (when err (raise err))
  (uv-handle-close server))

(uv-stream-listen server
                  128
                  on-connection)

(define addr (uv-tcp-sockname server))

(printf "server=%S, address=%S\n" server addr)

(define client (uv-make-tcp loop))

(define (on-connect err)
  (when err (raise err))
  (printf "client %S on connect\n" client)
  (define peername (uv-tcp-peername client))
  (printf "peername=%S\n" peername)
  (define req
    (uv-stream-shutdown
      client
      (lambda (err)
        (when err (raise err))
        (uv-handle-close
          client
          (lambda ()
            (printf "client %S on close\n" client))))))
  (assert (uv-req? req))
  (assert (uv-shutdown? req)))

(define req
  (uv-tcp-connect client
                  "127.0.0.1"
                  (hash-ref addr 'port)
                  on-connect))
(prin1n req)

(uv-loop-run loop)

(newline)
;; basic tcp server and client (ipv6)
(println ";; basic tcp server and client (ipv6)")

(define server (uv-make-tcp loop))

(uv-tcp-bind server "::1" 0)

(uv-stream-listen server 128 on-connection)

(define addr (uv-tcp-sockname server))

(define client (uv-make-tcp loop))

(printf "server=%S, address=%S\n" server addr)

(define req
  (uv-tcp-connect client
                  "::1"
                  (hash-ref addr 'port)
                  on-connect))

(prin1n req)

(uv-loop-run loop)

(newline)
;; tcp echo server and client
(println ";; tcp echo server and client")

(define server (uv-make-tcp loop))

(uv-tcp-bind server "127.0.0.1" 0)

(define (not-uv-eof-err? err)
  (and err (not (eq (error-type err) 'UV_EOF))))

(define (on-connection err)
  (when err (raise err))
  (define client (uv-make-tcp loop))
  (uv-stream-accept server client)
  (uv-stream-read-start
    client
    (lambda (err data)
      (printf "server read: %S\n" (cons data err))
      (when (not-uv-eof-err? err)
        (raise err))
      (if data
        (uv-stream-write client nil data)
        (begin
          (uv-stream-read-stop client)
          (uv-handle-close client)
          (uv-handle-close server))))))

(uv-stream-listen server
                  1
                  on-connection)

(define addr (uv-tcp-sockname server))

(prin1n addr)

(define socket (uv-make-tcp loop))

(define (on-connect err)
  (when err (raise err))
  (uv-stream-read-start
    socket
    (lambda (err data)
      (printf "client read: %S\n" (cons data err))
      (when (not-uv-eof-err? err)
        (raise err))
      (uv-stream-read-stop socket)
      (uv-handle-close socket)))
  (define req (uv-stream-write
                socket
                (lambda (err)
                  (when err (raise err))
                  (printf "client onwrite %S %S\n" socket err))
                "Hello"))
  (assert (uv-req? req))
  (assert (uv-write? req))
  (printf "write req=%S\n" req))

(define req
  (uv-tcp-connect socket
                  "127.0.0.1"
                  (hash-ref addr 'port)
                  on-connect))

(assert (uv-req? req))
(assert (uv-connect? req))

(uv-loop-run loop)

(newline)
;; tcp invalid ip address
(println ";; tcp invalid ip address")

(define ip "127.0.0.100005")

(define server (uv-make-tcp loop))

(assert (error? (prin1n (pcall uv-tcp-bind server ip 1000))))

(uv-handle-close server)

(uv-loop-run loop)

(newline)
;; tcp close reset client
(define server (uv-make-tcp loop))

(uv-tcp-bind server "127.0.0.1" 0)

(uv-stream-listen
  server
  1
  (lambda (err)
    (when err (raise err))
    (define client (uv-make-tcp loop))
    (uv-stream-accept server client)
    (uv-stream-read-start
      client
      (lambda (err data)
        (printf "server read %S\n" (cons data err))
        (if data
          (uv-stream-write client nil data)
          (begin
            (assert (eq (error-type err) 'UV_ECONNRESET))
            (uv-stream-read-stop client)
            (uv-handle-close client)
            (uv-handle-close server)))))))

(define addr (uv-tcp-sockname server))

(prin1n addr)

(define socket (uv-make-tcp loop))

(uv-tcp-connect
  socket
  "127.0.0.1"
  (hash-ref addr 'port)
  (lambda (err)
    (uv-stream-read-start
      socket
      (lambda (err data)
        (when err (raise err))
        (printf "client read %S\n" (cons data err))
        (uv-stream-read-stop socket)
        (uv-tcp-close-reset
          socket
          (lambda ()
            (assert (uv-handle-closing? socket))
            (assert (eq 'UV_ENOTCONN (error-type (pcall uv-stream-shutdown socket))))))))
    (uv-stream-write
      socket
      (lambda (err)
        (printf "client onwrite %S %S\n" socket err)
        (when err (raise err)))
      "Hello")))

(uv-loop-run loop)

(newline)
;; socketpair ping ping
(println ";; socketpair ping pong")

(define PING "PING\n")
(define PONG "PONG\n")
(define NUM_PINGS 4)

(define fds (uv-socketpair 'stream nil 1 1))

(define pinger (uv-make-tcp loop))
(uv-tcp-open pinger (cdr fds))

(define ponger (uv-make-tcp loop))
(uv-tcp-open ponger (car fds))

(define (ping)
  (uv-stream-write
    pinger
    (lambda (err) (when err (raise err)))
    PING))

(define pongs 0)

(ping)

(uv-stream-read-start
  pinger
  (lambda (err chunk)
    (when (not-uv-eof-err? err) (raise err))
    (when chunk
      (assert (equal chunk PONG))
      (print PONG)
      (setq pongs (1+ pongs))
      (if (eqv pongs NUM_PINGS)
        (begin
          (uv-handle-close ponger)
          (uv-handle-close pinger))
        (ping)))))

(uv-stream-read-start
  ponger
  (lambda (err chunk)
    (when (not-uv-eof-err? err) (raise err))
    (when chunk
      (assert (equal chunk PING))
      (print PING)
      (uv-stream-write
        ponger
        (lambda (err) (when err (raise err)))
        PONG))))

(uv-loop-run loop)
