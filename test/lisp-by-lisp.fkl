(import (.. lib utils))

(define (pair x y)
  (if (and (null x) (null y))
    nil
    (if (and (not (atom x))
          (not (atom y)))
      (cons (list (car x) (car y))
            (pair (cdr x) (cdr y))))))

(define (assoc x y)
  (if (eq (caar y) x) (cadar y)
    (assoc x (cdr y))))

(define (apply f args)
  (eval (cons f (appq args)) nil))

(define (appq m)
  (if (null m)
    nil
    (cons (list 'QUOTE (car m))
          (appq (cdr m)))))

(define (eval e a)
  (printf "eval[\n    %s;\n    %s\n]\n" e a)
  (cond
    [(atom e) (assoc e a)]
    [(atom (car e))
     (cond
       [(eq (car e) 'QUOTE) (cadr e)]
       [(eq (car e) 'ATOM) (atom (eval (cadr e) a))]
       [(eq (car e) 'EQ) (eq (eval (cadr e) a)
                             (eval (caddr e) a))]
       [(eq (car e) 'COND) (evcon (cdr e) a)]
       [(eq (car e) 'CAR) (car (eval (cadr e) a))]
       [(eq (car e) 'CDR) (cdr (eval (cadr e) a))]
       [(eq (car e) 'CONS) (cons (eval (cadr e) a)
                                 (eval (caddr e) a))]
       [1 (eval (cons (assoc (car e) a) (cdr e)) a)])]
    [(eq (caar e) 'LABEL) (eval (cons (caddar e) (cdr e))
                                (cons (list (cadar e) (car e)) a))]
    [(eq (caar e) 'LAMBDA) (eval (caddar e)
                                 (append (pair (cadar e) (evlis (cdr e) a))
                                         a))]))

(define (evcon c a)
  (if (eval (caar c) a)
    (eval (cadar c) a)
    (evcon (cdr c) a)))

(define (evlis m a)
  (if (null m)
    nil
    (cons (eval (car m) a)
          (evlis (cdr m) a))))


(define exp '(LAMBDA (X Y) (CONS (CAR X) Y)))
(define arg '((A B) (C D)))

(printf "apply[%s; %s]\n" exp arg)

(define result (apply exp arg))

(printf "result: %s\n\n" result)

(assert (equal result '(A C D)))

(define exp
  '(LABEL FF
          (LAMBDA (X)
                  (COND
                    ((ATOM X) X)
                    ((QUOTE T) (FF (CAR X)))))))

(define arg '((A , B)))

(printf "apply[%s; %s]\n" exp arg)

(define result (apply exp arg))

(printf "result: %s\n\n" result)

(assert (equal result 'A))

