(defmacro #("\\" a "->" b)
  `(lambda (~a) ~b))
(defmacro #("call" a b)
  `(~a,~b))
(defmacro #("var" a "=" b)
  `(define ~a ~b))
(defmacro #("function" n a "{" #&b "}")
  `(define ~n (lambda ~a ~@b)))

var pop=9
function list ls
{
    ls
}
function square (a)
{
    call * (a a)
}

call println ((\x->(+ x 9) 9))
call println (call list (1 2 3))
call println (call square (pop))
