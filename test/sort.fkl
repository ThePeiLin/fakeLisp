(import (only (.. lib utils m) assert))
(import (.. lib utils f))

(define a '(1 2 3 4 5 6 7 8 9))
(define b (list-merge-sort! > a))
(assert (equal b '(9 8 7 6 5 4 3 2 1)))
(assert (eq a a))

(define a '(1 2 3 4 5 6 7 8 9))
(define b (list-merge-sort! < a))
(assert (equal b '(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(define a '(9 8 7 6 5 4 3 2 1))
(define b (list-merge-sort! < a))
(assert (equal b '(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(define a '(1 2 3 4 5 6 7 8 9))
(define b (list-merge-sort > a))
(assert (equal b '(9 8 7 6 5 4 3 2 1)))
(assert (not (eq a b)))

(define a '(1 2 3 4 5 6 7 8 9))
(define b (list-merge-sort < a))
(assert (equal b '(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))

(define a '(9 8 7 6 5 4 3 2 1))
(define b (list-merge-sort < a))
(assert (equal b '(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))


(define a #(1 2 3 4 5 6 7 8 9))
(assert (equal (vec-merge-sort! > a)
               #(9 8 7 6 5 4 3 2 1)))
(assert (eq a a))

(assert (equal (vec-merge-sort! < a)
               #(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(assert (equal (vec-merge-sort! < a)
               #(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(define b (vec-merge-sort > a))
(assert (equal b #(9 8 7 6 5 4 3 2 1)))
(assert (not (eq a b)))

(define a b)
(define b (vec-merge-sort < a))
(assert (equal b #(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))

(define a b)
(define b (vec-merge-sort < a))
(assert (equal b #(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))

(define a #d(1 2 3 4 5 6 7 8 9))
(assert (equal (dvec-merge-sort! > a)
               #d(9 8 7 6 5 4 3 2 1)))
(assert (eq a a))

(assert (equal (dvec-merge-sort! < a)
               #d(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(assert (equal (dvec-merge-sort! < a)
               #d(1 2 3 4 5 6 7 8 9)))
(assert (eq a a))

(define b (dvec-merge-sort > a))
(assert (equal b #d(9 8 7 6 5 4 3 2 1)))
(assert (not (eq a b)))

(define a b)
(define b (dvec-merge-sort < a))
(assert (equal b #d(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))

(define a b)
(define b (dvec-merge-sort < a))
(assert (equal b #d(1 2 3 4 5 6 7 8 9)))
(assert (not (eq a b)))

(assert (equal (msort! > '(1 2 3 4 5 6 7 8 9))
               '(9 8 7 6 5 4 3 2 1)))
(assert (equal (msort > '(1 2 3 4 5 6 7 8 9))
               '(9 8 7 6 5 4 3 2 1)))

(assert (equal (msort! > #(1 2 3 4 5 6 7 8 9))
               #(9 8 7 6 5 4 3 2 1)))
(assert (equal (msort > #(1 2 3 4 5 6 7 8 9))
               #(9 8 7 6 5 4 3 2 1)))

(assert (equal (msort! > #d(1 2 3 4 5 6 7 8 9))
               #d(9 8 7 6 5 4 3 2 1)))
(assert (equal (msort > #d(1 2 3 4 5 6 7 8 9))
               #d(9 8 7 6 5 4 3 2 1)))
