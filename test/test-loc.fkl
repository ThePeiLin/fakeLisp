(import (only (.. lib utils m) assert))

(define (f1)
  (define (f2)
    (define (f3)
      (unless (equal a "f3")
        (throw 'assert-failed "f3"))
      (println "f3:" a))
    (unless (equal a "f2")
        (throw 'assert-failed "f2"))
    (println "f2:" a)
    (define a "f3")
    (f3))
  (define a "f2")
  (f2))

(f1)

(define f1 nil)
(define f2 nil)

(define (f3 a)
  (setq f1 (lambda (x)
             (define t a)
             (setq a x)
             t))
  (setq f2 (lambda () a)))

(f3 10)

(println (f2))
(println (f1 9))
(println (// 9 (- 10 (f2))))

(define (cons x y)
  (lambda (m) (m x y)))
(define (car x)
  (x (lambda (m n) m)))
(define (cdr x)
  (x (lambda (m n) n)))
(define c1 (cons 'foo 'bar))
(println (car c1))
(println (cdr c1))

(define f 'foobar)

(local
  (define (f) f)
  (assert (eq f (f)))
  (println "f is eq to (lambda () f)"))

(letrec [(f (lambda () f))]
  (assert (eq f (f)))
  (println "f is eq to (lambda () f)"))

(letrec [(a 114514)
         (f (lambda () f))]
  (assert (eq f (f)))
  (println "f is eq to (lambda () f)"))

