(import (.. lib buf))
(import (only (.. lib utils m) assert))

(define b (make-strbuf 10 #\a))

(assert (strbuf? b))
(assert (= b "aaaaaaaaaa"))
(assert (= (strbuf->bytes b)
           (string->bytes "aaaaaaaaaa")))
(assert (eq 'aaaaaaaaaa (strbuf->symbol b)))
(assert (equal (make-vector 10 #\a)
               (strbuf->vector b)))
(assert (equal (make-string 10 #\a)
               (strbuf->string b)))
(assert (equal (make-list 10 #\a)
               (strbuf->list b)))
(append! b "bcde")
(assert (eq (strbuf-ref b 10)
            #\b))

(define c (append b #\f "g"))
(assert (equal c (append b "fg")))
(append! c b)
(assert (equal c (append b "fg" b)))

(strbuf-set! b 10 #\z)
(assert (eq (strbuf-ref b 10)
            #\z))

(define capacity (strbuf-capacity b))
(assert (= "" (strbuf-clear! b)))
(assert (strbuf-empty? b))
(assert (= capacity (strbuf-capacity b)))
(strbuf-reserve! b 114)
(assert (>= (strbuf-capacity b)
            114))
(assert (= (strbuf-fmt! b "hello, %s\n" 'world)
           "hello, world\n"))

(strbuf-shrink! b 15)
(assert (= (strbuf-capacity b) 15))

(strbuf-shrink! b)
(assert (= (strbuf-capacity b)
           (1+ (length b))))

(strbuf-resize! b 5)
(assert (= b "hello"))
(strbuf-resize! b 4 #\a)
(assert (= b "hell"))
(strbuf-resize! b 10 #\a)
(assert (= b "hellaaaaaa"))
(define c (substrbuf b 1 5))
(assert (= c "ella"))
(define c (sub-strbuf b 4 6))
(assert (= c "aaaaaa"))

(assert (= (strbuf "abcd") "abcd"))
(assert (= (strbuf #\a #\b #\c #\d) "abcd"))
(assert (= (strbuf #\a ) "a"))
(assert (= (strbuf) ""))

(define d (make-strbuf/capacity 114))
(assert (>= (strbuf-capacity d) 114))
