(import (only (.. lib utils) assert))
(println "\ncompile check test")

;; 1
(println (cfg *main?*))

;; 1
(assert (println (cfg (and))))

;; ()
(assert
  (not (println
         (cfg
           (and (not bar)
             (and 1 (not foo))
             (and (not 1) (not foo)))))))

;; 1
(assert
  (println
    (cfg
      (and (not bar)
        (and 1 (not foo))))))

;; 1
(assert
  (println
    (cfg
      (not (and (not bar)
             (and 1 (not foo))
             (and (not 1) (not foo)))))))

;; ()
(assert (not (println (cfg (or)))))

;; 1
(assert
  (println
    (cfg
      (or bar
        (or 1 foo)))))

;; ()
(assert
  (not (println
         (cfg
           (or bar
             (or (not 1) foo))))))

;; 1
(assert (println (cfg (import (.. lib json)))))

;; ()
(assert (not (println (cfg (import (foobar))))))

(defmacro foo 'bar)
(defmacro ~(foobar) 'foobar)

(defmacro #&foobar
  #(#[#&"/\\*\\*/|^/\\*.*\\*/$"]))

(assert (println (cfg (defmacro foo)))) ;; 1
(assert (println (cfg (defmacro (foobar))))) ;; 1
(assert (println (cfg (defmacro #(foobar))))) ;; 1

;; 1
(assert
  (println (cfg (and
                  (defmacro foo)
                  (defmacro (foobar))
                  (defmacro #(foobar))))))

(assert (not (println (cfg (defmacro bar))))) ;; ()
(assert (not (println (cfg (defmacro (barfoo)))))) ;;()
(assert (not (println (cfg (defmacro #(barfoo)))))) ;;()

;; ()
(assert
  (not (println (cfg (or
                       (defmacro bar)
                       (defmacro (barfoo))
                       (defmacro #(barfoo)))))))

;; main!
(cfg *main?* (println "main!"))

;; 1
(println (cfg (eq *main?* 1)))

;; main
(cfg
  *main?* (println "main")
  (define foo) (println foo)
  (import (lib json)) (println '(lib json))
  (defmacro foo) (println foo)
  (defmacro (cc)) (println '(cc))
  (defmacro #(cc)) (println '#(cc))
  (or (import (lib json))
    (define foo)
    *main?*)
  (println "json or main or foo")
  (and (import (lib json))
    (define foo)
    *main?*)
  (println "json and main and foo")
  (not (import (lib json)))
  (println "not has (lib json)"))

(cfg (eq *platform* "win32") (println "win32!")
  1 (println "not win32!"))

(cfg
  (eq *platform* "linux") (println "linux!")
  1 (println "not linux!"))

;; always
(assert (equal (cfg 1 (println "always")) "always"))

(println "done!")

(defmacro foobar (foo))

(defmacro version #(114 514 19))

(defmacro manifest #hash((foo,114) (bar,514)))

(assert (println (cfg (match foobar ~(foo)))))

(assert (println (cfg (match foobar ~(~*)))))

(assert (println (cfg (match version ~#(114 ~* ~*)))))

(assert (not (println (cfg (match version ~#(514 ~* ~*))))))

(assert (println (cfg (match manifest ~#hash((foo,~*) (bar,~*))))))

(define sys-info
  (cfg
    (eq *platform* "linux") "linux"
    1 "other"))

(printf "the system is %s\n" sys-info)
