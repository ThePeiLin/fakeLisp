(defmacro ~(defstruct ~name ~fields,~methods)
  (begin
    (if (or (not (symbol? name))
          (not (andmap symbol? fields)))
      (throw 'incorrect-type
             "type of name or fields should be symbol"))
    (define field-idx-ht #hash())
    (do [(cur fields (cdr cur))
         (idx 1 (1+ idx))]
      [(null cur)]
      (define field (car cur))
      (if (eq field name)
        (throw 'invalid-member-name
               (format "member name cannot be %S" name)))
      (if (hash-ref field-idx-ht field ())
        (throw 'duplicate-member
               (format "duplicate member %S" field)))
      (hash-set! field-idx-ht field idx))
    (define name-str (symbol->string name))
    (define type-checker-name (string->symbol (append name-str "?")))
    (define method-names #hash())

    (define method-head-process-func
      (make-hash
        'from
        (lambda
          (from-type)
          (string->symbol (format "%s->%s" (symbol->string from-type) name-str)))
        'to
        (lambda
          (from-type)
          (string->symbol (format "%s->%s" name-str (symbol->string from-type))))))

    (define (process-method-define def)
      (define head (car def))
      (define args (car (cdr def)))
      (define body (cdr (cdr def)))
      (define method-name
        (cond
          [(symbol? head)
           (string->symbol
             (format "%s-%s" name-str
                     (symbol->string head)))]
          [(list? head)
           (define type (car head))
           (apply
             (hash-ref method-head-process-func type)
             (cdr head))]
          [1 (throw 'incorrect-method-head
                    "method head should be list or symbol")]))
      (if (hash-ref method-names method-name ())
        (throw 'duplicate-member
               (format "duplicate member %S" method-name)))
      (hash-set! method-names method-name 1)
      `(define (~method-name,~args),~body))

    `(begin
       (define
         (~(string->symbol (append "make-" name-str)),~fields)
         (vector (quote ~name),~fields))
       (define (~type-checker-name ~name)
         (and
           (eq (vector-ref ~name 0) (quote ~name))
           (eqv (length ~name) ~(1+ (hash-num field-idx-ht)))))
       ~@(map
           (lambda (kv)
             (define field-name (symbol->string (car kv)))
             (define idx (cdr kv))
             (define func-name (string->symbol (format "%s-%s" name-str field-name)))
             (hash-ref! method-names func-name 1)
             `(define (~func-name ~name)
                (unless (~type-checker-name ~name)
                  (throw 'incorrect-type
                         "Incorrect type of values"))
                (vector-ref ~name ~idx)))
           (hash->list field-idx-ht))
       ~@(map
           (lambda (kv)
             (define field (car kv))
             (define field-name (symbol->string (car kv)))
             (define idx (cdr kv))
             (define func-name (string->symbol (format "%s-%s-set!" name-str field-name)))
             (hash-ref! method-names func-name 1)
             `(define (~func-name ~name ~field)
                (unless (~type-checker-name ~name)
                  (throw 'incorrect-type
                         "Incorrect type of values"))
                (vector-set! ~name ~idx ~field)))
           (hash->list field-idx-ht))
       ~@(map process-method-define
              methods))))

(defstruct mypair
  [car cdr]
  [(from pair)
   (pair)
   (unless (pair? pair)
     (throw 'incorrect-type
            "Incorrect type of values"))
   (make-mypair (car pair) (cdr pair))]
  [(to pair)
   (mypair)
   (unless (mypair? mypair)
     (throw 'incorrect-type
            "Incorrect type of values"))
   (cons (mypair-car mypair)
         (mypair-cdr mypair))])

(define foo (make-mypair 114 514))
(println foo)
(println (mypair? foo))
(println (mypair-car foo))
(println (mypair-cdr foo))

(mypair-car-set! foo 'foo)
(mypair-cdr-set! foo 'bar)
(println foo)

(define bar (cons 'foobar 114514))
(println (pair->mypair bar))

(println (mypair->pair foo))
