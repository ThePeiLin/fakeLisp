(import (only (.. lib utils) assert))
(import (.. lib dvec))

(define v #(foo bar))
(println (vector-ref v 0))
(println (vector-first v))
(assert (eq (vector-first v) 'foo))
(println (vector-last v))
(assert (eq (vector-last v) 'bar))

(define vd (dvec 1 2 3 4 5))
(prin1n (dvec->vector vd))
(dvec-insert! vd 2 'foo)
(prin1n (dvec->vector vd))
(dvec-insert! vd 3 'bar)
(prin1n (dvec->vector vd))
(dvec-insert! vd 0 'foobar)
(prin1n (dvec->vector vd))
(prin1n (length vd))
(assert (eqv (length vd) 8))
(prin1n (dvec-capacity vd))

(define vd (dvec 1 2 3 4 5 6))
(prin1n (dvec->vector vd))
(dvec-insert! vd 2 10 'foo)
(prin1n (dvec->vector vd))
(printf "capacity %s\n" (dvec-capacity vd))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 16))
(dvec-insert! vd 3 2 'bar)
(prin1n (dvec->vector vd))
(printf "capacity: %s\n" (dvec-capacity vd))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 18))
(dvec-insert! vd 3 0 'bar)
(prin1n (dvec->vector vd))
(printf "capacity: %s\n" (dvec-capacity vd))
(printf "length: %s\n" (length vd))
(assert (eqv (length vd) 18))

(define another-vd  (copy vd))
(prin1n (dvec->vector another-vd))

(printf "capacity %s\n" (dvec-capacity another-vd))
(printf "length: %s\n" (length another-vd))
(assert (eqv (length another-vd) 18))

(define len (+ (length vd)
               (length another-vd)
               (length #(114 514))))

(append! vd another-vd (dvec 114 514))
(prin1n (dvec->vector vd))
(printf "expect length: %s, actual length: %s\n"
        len
        (length vd))
(assert (eqv len (length vd)))

(define len (+ (length vd)
               (length another-vd)
               (length #(114 514))))
(define vvd (append vd another-vd (dvec 114 514)))
(prin1n (dvec->vector vvd))
(printf "expect length: %s, actual length: %s\n"
        len
        (length vvd))
(assert (eqv len (length vvd)))


(define s "foo")
(prin1n (append s "bar" "114" "514"))
(assert (equal (append s "bar" "114" "514")
               "foobar114514"))

(define b #"\1\2\3")
(prin1n (append b #"\4\5\6" #"\11\22\33" #"\44\55\66"))
(assert (equal (append b #"\4\5\6" #"\11\22\33" #"\44\55\66")
               #"\1\2\3\4\5\6\11\22\33\44\55\66"))

(define v #(foo bar))
(prin1n (append v #(bar foo)))
(assert (equal (append v #(bar foo))
               #(foo bar bar foo)))

(define l '(1 2 3))
(prin1n (append l '(4 5 6) '(7 8 9)))
(assert (equal (append l '(4 5 6) '(7 8 9))
               '(1 2 3 4 5 6 7 8 9)))
(append! l '(4 5 6) '(7 8 9))
(prin1n l)
(assert (equal l '(1 2 3 4 5 6 7 8 9)))

(define v (dvec 'foo 'bar))
(prin1n (dvec->vector (append v (dvec 'bar 'foo) #(114 514) (dvec 'foobar))))
(assert (equal (dvec->vector (append v (dvec 'bar 'foo) #(114 514) (dvec 'foobar)))
               #(foo bar bar foo 114 514 foobar)))

(define vd (dvec 'foo 'bar))
(prin1n (dvec->vector (append vd #(bar foo) (dvec 114 514) #(foobar))))
(assert (equal (append vd #(bar foo) (dvec 114 514) #(foobar))
               (dvec 'foo 'bar 'bar 'foo 114 514 'foobar)))

(append! vd #(bar foo) (dvec 114 514) #(foobar))
(prin1n (dvec->vector vd))
(assert (equal vd (dvec 'foo 'bar 'bar 'foo 114 514 'foobar)))
