(define count 0)

(defmacro THREAD-NUM 100)

(defmacro INC 2)

(defmacro TOTAL (* THREAD-NUM INC))

(define (f1 a)
  (printf "count=%s+count\n" INC)
  (setq count (+ count INC)))

(define (f bar)
  (barrier-wait bar)
  (idle f1 1))

(import (.. lib sync))

(define bar (make-barrier THREAD-NUM))

(define ch '())

(do [(n 0 (1+ n))]
  [(>= n THREAD-NUM)]
  (setq ch (cons (go f bar) ch)))

(foreach recv ch)

(import (only (.. lib utils m) assert))

(assert (eqv (println count) TOTAL))

(idle println "hello, world in idle thread")
