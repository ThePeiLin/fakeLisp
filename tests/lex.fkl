(defmacro #&json
  #(json #["#json'" json-value] builtin second)

  #(#[#&"null"] json-value builtin symbol)

  #(#[#&"true"] json-value builtin symbol)

  #(#[#&"false"] json-value builtin symbol)

  #(#[*string*] json-value builtin first)

  #(#[*integer*] json-value builtin first)

  #(#[*float*] json-value builtin first)

  #(#["{" json-object-items "}"] json-value builtin hashequal)

  #(#[*string* ":" json-value] json-object-item builtin pair)

  #(#[] json-object-items builtin nil)

  #(#[json-object-item] json-object-items builtin cons)

  #(#[json-object-item "," json-object-items] json-object-items builtin pair)


  #(#["[" json-array-items "]"] json-value builtin vector)

  #(#[] json-array-items builtin nil)

  #(#[json-value] json-array-items builtin cons)

  #(#[json-value "," json-array-items] json-array-items builtin pair))

(prin1n #json'{"foo":1,"bar":2,})

(prin1n #json'["foo","bar",null,true,false])

(defmacro #&other
  #(() #["#4th'" *s-exp* *s-exp* *s-exp* *s-exp*] simple #(nth 4))
  #(() #["#23cons'" *s-exp* *s-exp* *s-exp* *s-exp*] simple #(cons 3 4))
  #(() #["#head'" *s-exp* *s-exp*] simple #(head head 1 2))
  #(() #["#2nd-vector'" *s-exp* *s-exp*] simple #(vector 2))
  ;; FIXME
  #(() #[#(?symbol "《" "》")] simple #(symbol 0 "《" "》"))
  #(() #[#&'"“”|^“(\\\\.|.)*”$"] simple #(string 0 "“" "”"))
  #(() #["#other-json'" (json,json-value)] builtin second)
  #(() #[#&"var" *symbol* #("=") *s-exp*] simple #(head define 1 3)))

(prin1n '#4th' foo bar foobar barfoo)

(prin1n '#23cons' foo bar foobar barfoo)

(prin1n '#head' foo bar)

(prin1n '#2nd-vector' (foo bar) (foobar barfoo))

(prin1n '《测试》)

(prin1n '“测试”)

(prin1n #other-json'["foo","bar",null,true,false])

var foo = 114514

(println foo)
