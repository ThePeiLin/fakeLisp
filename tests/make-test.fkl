(export
  (defmacro ~(make-test,~rest)
    (if rest
      `(let [(msg (make-vector ~(length rest) ()))]
         ~@(local
             (define num 0)
             (map (lambda (t)
                    (define r
                      `(local
                         (define test-num ~num)
                         (let [(err (pcall (lambda () (import (only ~t)))))]
                           (if (error? err)
                             (vector-set! msg
                                          test-num
                                          (cons err
                                                (format "test-%S<%S> failed: %S: %s"
                                                        test-num
                                                        (quote ~t)
                                                        (error-type err)
                                                        (error-msg err))))
                             (vector-set! msg
                                          test-num
                                          (cons ()
                                                (format "test-%S<%S> success"
                                                        test-num
                                                        (quote ~t)))))
                           (newline))))
                    (setq num (1+ num))
                    r)
                  rest))
         msg)
      `())))
